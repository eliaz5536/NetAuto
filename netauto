#!/bin/bash

###############################################################
# Color Codes 				 	      	      # 
###############################################################
# Default Font
BLACK="\e[30m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
LIGHT_GRAY="\e[37m"
GRAY="\e[90m"
LIGHT_RED="\e[91m"
LIGHT_GREEN="\e[92m"
LIGHT_YELLOW="\e[93m"
LIGHT_BLUE="\e[94m"
LIGHT_MAGENTA="\e[95m"
LIGHT_CYAN="\e[96m"
WHITE="\e[97m"
ENDCOLOR="\e[0m"

# Bold 
BOLD_BLACK="\e[1;30m"
BOLD_RED="\e[1;31m"
BOLD_GREEN="\e[1;32m"
BOLD_YELLOW="\e[1;33m"
BOLD_BLUE="\e[1;34m"
BOLD_MAGENTA="\e[1;35m"
BOLD_CYAN="\e[1;36m"
BOLD_LIGHT_GRAY="\e[1;37m"
BOLD_GRAY="\e[1;90m"
BOLD_LIGHT_RED="\e[1;91m"
BOLD_LIGHT_GREEN="\e[1;92m"
BOLD_LIGHT_YELLOW="\e[1;93m"
BOLD_LIGHT_BLUE="\e[1;94m"
BOLD_LIGHT_MAGENTA="\e[1;95m"
BOLD_LIGHT_CYAN="\e[1;96m"
BOLD_WHITE="\e[1;97m"

# Italic
ITALIC_BLACK="\e[3;30m"
ITALIC_RED="\e[3;31m"
ITALIC_GREEN="\e[3;32m"
ITALIC_YELLOW="\e[3;33m"
ITALIC_BLUE="\e[3;34m"
ITALIC_MAGENTA="\e[3;35m"
ITALIC_CYAN="\e[3;36m"
ITALIC_LIGHT_GRAY="\e[3;37m"
ITALIC_GRAY="\e[3;90m"
ITALIC_LIGHT_RED="\e[3;91m"
ITALIC_LIGHT_GREEN="\e[3;92m"
ITALIC_LIGHT_YELLOW="\e[3;93m"
ITALIC_LIGHT_BLUE="\e[3;94m"
ITALIC_LIGHT_MAGENTA="\e[3;95m"
ITALIC_LIGHT_CYAN="\e[3;96m"
ITALIC_WHITE="\e[3;97m"

# Background Color
BLACK_BG="\e[40m"
RED_BG="\e[41m"
GREEN_BG="\e[42m"
YELLOW_BG="\e[43m"
BLUE_BG="\e[44m"
MAGENTA_BG="\e[45m"
CYAN_BG="\e[46m"
WHITE_BG="\e[47m"

# Styles
BOLD="\e[1m"
ITALIC="\e[3m"

###############################################################
# Current Time 				 	      	      # 
###############################################################
current_time=$(date +"%T")

###############################################################
# Path Check		      				      #
###############################################################
path_check() {
	local path=$1
	local scan=$2

	# Directory Path
	if [[ -d $1 ]]; then
		echo " "
		printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Created $2 output directory of target live host under '$1'${ENDCOLOR}\n"
	else
		echo " "
		printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${WARNING}YELLOW${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Failed to $2 output directory of target live host under '$1'${ENDCOLOR}\n" 
	fi

	# File Path
	if [[ -e $1 ]]; then
		echo " "
		printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Generated output data for $2 of target live host under '$1'${ENDCOLOR}\n"
	else
		echo " "
		printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${WARNING}YELLOW${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Failed to generate output data for $2 of target live host under '$1'${ENDCOLOR}\n" 
	fi
}

###############################################################
# Banner 				 	      	      # 
###############################################################
bash -c "printf '\e[49m                                                  \e[m
\e[49m               \e[38;5;239;49m▄\e[38;5;238;49m▄\e[38;5;239;49m▄\e[38;5;239;48;5;238m▄\e[38;5;239;48;5;239m▄\e[48;5;239m  \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[38;5;239;48;5;240m▄\e[38;5;239;49m▄▄▄\e[49m               \e[m
\e[49m            \e[38;5;238;49m▄\e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄▄\e[48;5;239m  \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;240m▄\e[38;5;239;49m▄\e[49m            \e[m
\e[49m         \e[38;5;238;49m▄\e[38;5;238;48;5;238m▄▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;238;48;5;238m▄▄\e[49;38;5;238m▀▀▀\e[49m          \e[49;38;5;238m▀\e[49;38;5;239m▀▀\e[38;5;239;48;5;239m▄\e[48;5;239m  \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;49m▄\e[49m         \e[m
\e[49m       \e[38;5;238;49m▄\e[38;5;238;48;5;238m▄▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[49;38;5;238m▀▀\e[49m   \e[38;5;238;49m▄▄▄\e[38;5;238;48;5;238m▄\e[38;5;238;48;5;239m▄\e[48;5;239m  \e[38;5;239;48;5;239m▄▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[38;5;239;49m▄▄▄\e[49m   \e[49;38;5;239m▀▀\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;49m▄\e[49m       \e[m
\e[49m        \e[49;38;5;238m▀▀\e[38;5;238;48;5;238m▄\e[49;38;5;238m▀\e[49m   \e[38;5;238;49m▄\e[38;5;238;48;5;238m▄▄\e[48;5;238m \e[38;5;238;48;5;238m▄▄▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[38;5;238;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;49m▄\e[49m   \e[49;38;5;239m▀\e[38;5;239;48;5;239m▄\e[49;38;5;239m▀\e[49;38;5;238m▀\e[49m        \e[m
\e[49m            \e[38;5;238;49m▄\e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[49;38;5;238m▀▀▀\e[49;38;5;239m▀\e[49m    \e[49;38;5;239m▀▀▀▀\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m \e[38;5;239;48;5;239m▄\e[48;5;239m  \e[38;5;239;49m▄\e[49m            \e[m
\e[49m             \e[49;38;5;238m▀\e[38;5;238;48;5;238m▄▄\e[49;38;5;238m▀▀\e[49m     \e[38;5;238;49m▄▄▄▄\e[49m     \e[49;38;5;239m▀▀\e[38;5;239;48;5;239m▄▄\e[49;38;5;239m▀\e[49m             \e[m
\e[49m                  \e[38;5;238;49m▄▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;238;48;5;238m▄▄\e[48;5;238m  \e[38;5;238;48;5;238m▄\e[38;5;238;49m▄▄\e[49m                  \e[m
\e[49m                 \e[49;38;5;238m▀\e[38;5;238;48;5;238m▄▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;239;48;5;238m▄\e[49;38;5;238m▀▀\e[38;5;238;48;5;238m▄\e[48;5;238m     \e[49;38;5;239m▀\e[49m                 \e[m
\e[49m                   \e[49;38;5;238m▀▀\e[49m        \e[49;38;5;238m▀▀\e[49m                   \e[m
\e[49m                      \e[38;5;238;48;5;238m▄▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[48;5;238m \e[38;5;238;48;5;238m▄\e[49m                      \e[m
\e[49m                       \e[49;38;5;238m▀▀▀▀\e[49m                       \e[m
\e[49m                    \e[38;5;109;49m▄▄\e[38;5;110;49m▄▄▄▄▄▄▄\e[38;5;67;49m▄\e[49m                    \e[m
\e[49m               \e[38;5;73;49m▄\e[38;5;109;49m▄\e[38;5;152;48;5;109m▄\e[38;5;195;48;5;110m▄\e[38;5;195;48;5;152m▄\e[38;5;195;48;5;254m▄\e[48;5;195m        \e[38;5;195;48;5;152m▄\e[38;5;195;48;5;110m▄▄\e[38;5;110;48;5;67m▄\e[38;5;109;49m▄▄\e[49m               \e[m
\e[49m            \e[38;5;110;49m▄\e[38;5;152;48;5;109m▄\e[38;5;195;48;5;110m▄\e[38;5;253;48;5;254m▄\e[38;5;152;48;5;152m▄\e[38;5;255;48;5;152m▄\e[38;5;152;48;5;195m▄\e[38;5;110;48;5;195m▄\e[38;5;116;48;5;152m▄▄\e[38;5;116;48;5;110m▄\e[38;5;110;48;5;110m▄\e[38;5;74;48;5;110m▄▄\e[38;5;116;48;5;110m▄▄\e[38;5;116;48;5;152m▄\e[38;5;110;48;5;255m▄\e[38;5;110;48;5;195m▄\e[38;5;152;48;5;195m▄\e[38;5;195;48;5;152m▄\e[38;5;152;48;5;152m▄\e[38;5;255;48;5;152m▄\e[38;5;195;48;5;110m▄\e[38;5;152;48;5;109m▄\e[38;5;110;49m▄\e[49m            \e[m
\e[49m         \e[38;5;73;49m▄\e[38;5;146;48;5;67m▄\e[38;5;195;48;5;110m▄\e[38;5;195;48;5;195m▄\e[38;5;152;48;5;255m▄\e[38;5;152;48;5;152m▄\e[38;5;116;48;5;254m▄\e[38;5;153;48;5;152m▄\e[38;5;153;48;5;116m▄\e[38;5;116;48;5;116m▄\e[38;5;152;48;5;110m▄\e[38;5;116;48;5;116m▄\e[38;5;110;48;5;116m▄\e[38;5;110;48;5;110m▄\e[38;5;110;48;5;74m▄\e[38;5;60;48;5;74m▄\e[38;5;60;48;5;110m▄\e[38;5;110;48;5;152m▄▄\e[38;5;110;48;5;116m▄\e[38;5;116;48;5;116m▄▄▄\e[38;5;153;48;5;116m▄\e[38;5;153;48;5;146m▄\e[38;5;152;48;5;152m▄▄\e[38;5;152;48;5;195m▄\e[38;5;195;48;5;255m▄\e[38;5;195;48;5;110m▄\e[38;5;110;48;5;67m▄\e[38;5;109;49m▄\e[49m         \e[m
\e[49m      \e[38;5;109;49m▄\e[38;5;146;48;5;67m▄\e[38;5;195;48;5;109m▄\e[38;5;195;48;5;254m▄\e[38;5;152;48;5;195m▄\e[38;5;152;48;5;254m▄\e[38;5;152;48;5;152m▄\e[38;5;189;48;5;146m▄\e[38;5;189;48;5;153m▄▄▄\e[38;5;254;48;5;153m▄\e[38;5;152;48;5;116m▄\e[38;5;152;48;5;152m▄▄\e[38;5;110;48;5;110m▄\e[38;5;66;48;5;110m▄\e[38;5;241;48;5;59m▄\e[38;5;60;48;5;60m▄\e[38;5;242;48;5;60m▄\e[38;5;241;48;5;59m▄\e[38;5;66;48;5;110m▄\e[38;5;110;48;5;110m▄\e[38;5;152;48;5;152m▄▄\e[38;5;152;48;5;116m▄\e[38;5;254;48;5;153m▄\e[38;5;189;48;5;153m▄▄▄\e[38;5;189;48;5;110m▄\e[38;5;152;48;5;152m▄\e[38;5;152;48;5;253m▄\e[38;5;152;48;5;195m▄\e[38;5;195;48;5;253m▄\e[38;5;195;48;5;110m▄\e[38;5;109;48;5;67m▄\e[38;5;109;49m▄\e[49m      \e[m
\e[49m     \e[38;5;110;48;5;109m▄\e[38;5;152;48;5;110m▄\e[38;5;254;48;5;195m▄\e[38;5;110;48;5;152m▄▄\e[38;5;110;48;5;146m▄\e[38;5;195;48;5;254m▄\e[38;5;195;48;5;195m▄▄▄▄▄\e[38;5;255;48;5;254m▄\e[38;5;152;48;5;152m▄\e[38;5;253;48;5;253m▄\e[38;5;152;48;5;152m▄\e[38;5;152;48;5;146m▄\e[38;5;152;48;5;67m▄\e[38;5;241;48;5;241m▄▄▄▄\e[38;5;152;48;5;103m▄\e[38;5;152;48;5;146m▄\e[38;5;152;48;5;152m▄\e[38;5;254;48;5;253m▄\e[38;5;152;48;5;152m▄\e[38;5;255;48;5;255m▄\e[38;5;195;48;5;195m▄▄▄▄▄▄\e[38;5;110;48;5;110m▄\e[38;5;110;48;5;254m▄\e[38;5;110;48;5;152m▄\e[38;5;189;48;5;195m▄\e[38;5;152;48;5;110m▄\e[38;5;152;48;5;109m▄\e[49m     \e[m
\e[49m     \e[38;5;67;48;5;110m▄\e[38;5;110;48;5;110m▄\e[38;5;110;48;5;109m▄\e[38;5;110;48;5;152m▄\e[38;5;152;48;5;152m▄\e[38;5;153;48;5;110m▄\e[38;5;152;48;5;195m▄\e[38;5;110;48;5;195m▄\e[38;5;152;48;5;195m▄\e[38;5;195;48;5;195m▄▄▄▄\e[38;5;189;48;5;152m▄\e[38;5;152;48;5;253m▄\e[38;5;254;48;5;253m▄\e[38;5;152;48;5;152m▄▄▄\e[38;5;152;48;5;66m▄▄\e[38;5;152;48;5;152m▄▄▄\e[38;5;254;48;5;253m▄\e[38;5;152;48;5;253m▄\e[38;5;195;48;5;152m▄\e[38;5;195;48;5;195m▄▄▄\e[38;5;189;48;5;195m▄\e[38;5;110;48;5;195m▄▄\e[38;5;152;48;5;195m▄\e[38;5;153;48;5;110m▄\e[38;5;152;48;5;152m▄\e[38;5;110;48;5;152m▄\e[38;5;110;48;5;110m▄\e[38;5;110;48;5;116m▄\e[49;38;5;110m▀\e[49m     \e[m
\e[49m         \e[49;38;5;67m▀\e[49;38;5;73m▀\e[49;38;5;110m▀\e[38;5;67;48;5;110m▄\e[38;5;73;48;5;153m▄\e[38;5;73;48;5;116m▄\e[38;5;153;48;5;110m▄\e[38;5;153;48;5;152m▄\e[38;5;110;48;5;195m▄▄\e[38;5;189;48;5;152m▄\e[38;5;152;48;5;152m▄▄▄\e[38;5;153;48;5;152m▄\e[38;5;152;48;5;152m▄▄\e[38;5;153;48;5;152m▄\e[38;5;152;48;5;152m▄▄▄\e[38;5;153;48;5;152m▄\e[38;5;110;48;5;195m▄▄\e[38;5;153;48;5;152m▄\e[38;5;153;48;5;110m▄\e[38;5;73;48;5;152m▄\e[38;5;73;48;5;153m▄\e[38;5;66;48;5;110m▄\e[49;38;5;110m▀\e[49;38;5;73m▀\e[49;38;5;66m▀\e[49m         \e[m
\e[49m              \e[49;38;5;67m▀\e[49;38;5;73m▀\e[38;5;67;48;5;74m▄\e[38;5;74;48;5;116m▄\e[38;5;116;48;5;153m▄\e[38;5;153;48;5;116m▄\e[38;5;153;48;5;110m▄▄▄\e[38;5;116;48;5;152m▄▄▄\e[38;5;116;48;5;116m▄\e[38;5;153;48;5;110m▄▄▄\e[38;5;153;48;5;116m▄\e[38;5;110;48;5;153m▄\e[38;5;74;48;5;153m▄\e[38;5;67;48;5;73m▄\e[49;38;5;73m▀\e[49;38;5;66m▀\e[49m              \e[m
\e[49m                  \e[49;38;5;74m▀▀▀\e[38;5;74;48;5;110m▄\e[38;5;74;48;5;117m▄\e[38;5;73;48;5;117m▄\e[38;5;67;48;5;117m▄▄\e[38;5;73;48;5;117m▄\e[38;5;74;48;5;116m▄\e[38;5;73;48;5;110m▄\e[49;38;5;74m▀▀\e[49;38;5;73m▀\e[49m                  \e[m
\e[49m                                                  \e[m
\e[49m                                                  \e[m
';"

###############################################################
# Protocols Scans 				 	      # 
###############################################################
dhcp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating DHCP on port 67 & 68${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate DHCP scan${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/DHCP
	path_check "$(pwd)/Netauto/$IP/Protocols/DHCP" "DHCP"
	
	mkdir -p Netauto/$IP/Protocols/DHCP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DHCP/nmap" "NMAP DHCP"

	sudo nmap -sU --script dhcp-discover -p 67,68 $IP -oN Netauto/$IP/Protocols/DHCP/nmap/dhcp_discover.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DHCP/nmap/dhcp_discover.txt" "NMAP DHCP discovery scan"

	sudo nmap -sU --script broadcast-dhcp-discover -p 67,68 $IP -oN Netauto/$IP/Protocols/DHCP/nmap/broadcast_dhcp_discover.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DHCP/nmap/broadcast_dhcp_discover.txt" "NMAP DHCP broadcast discovery scan"

	sudo nmap -sU --script broadcast-dhcp6-discover -p 67,68 $IP -oN Netauto/$IP/Protocols/DHCP/nmap/broadcast_dhcp6_discover.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DHCP/nmap/broadcast_dhcp6_discover.txt" "NMAP DHCP broadcast dhcp6 discovery scan"

	echo " " 
}

snmp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating SNMP on port 161${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/SNMP
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP" "SNMP"

	mkdir -p Netauto/$IP/Protocols/SNMP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap" "NMAP SNMP"

	nmap -p 161 -sU -oA nmap_udp_snmp $IP -oN Netauto/$IP/Protocols/SNMP/nmap/udp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/udp.nmap" "NMAP SNMP UDP scan"

	nmap -sU --script snmp-info -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/info.nmap" "NMAP SNMP info script scan"

	nmap -sU --script snmp-interfaces -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/interfaces.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/interfaces.nmap" "NMAP SNMP interface enumeration script scan"

	nmap -sU --script snmp-ios-config -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/ios-config.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/ios-config.nmap" "NMAP SNMP iOS configuration enumeration script scan"

	nmap -sU --script snmp-netstat -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/netstat.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/netstat.nmap" "NMAP SNMP Netstat script scan"

	nmap -sU --script snmp-processes -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/processes.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/processes.nmap" "NMAP SNMP processes enumeration script scan"

	nmap -sU --script snmp-sysdescr -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmao/sysdescr.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/sysdescr.nmap" "NMAP SNMP system description enumeration script scan"

	nmap -sU --script snmp-win32-services -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/win32-services.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/win32-services.nmap" "NMAP SNMP Win32 services enumeration script scan"

	nmap -sU --script snmp-win32-shares -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/win32-shares.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/win32-shares.nmap" "NMAP SNMP Win32 shares enumeration script scan"

	nmap -sU --script snmp-win32-software -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/snmp-win32-software.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/snmp-win32-software.nmap" "NMAP SNMP Win32 software enumeration script scan"

	nmap -sU --script snmp-win32-users -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/win32-users.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/win32-users.nmap" "NMAP SNMP Win32 users enumeration script scan"

	nmap -sU --script snmp-hh3c-logins -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/hh3c-logins.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/hh3c-logins.nmap" "NMAP SNMP hh3c login enumeration script scan"

	nmap -sU --script "snmp* and not brute" -p 161 $IP -oN Netauto/$IP/Protocols/SNMP/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/nmap/all.nmap" "full NMAP SNMP scan"

	mkdir -p Netauto/$IP/Protocols/SNMP/snmpwalk
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk" "SNMP snmpwalk enumeration scan"

	snmpwalk -v1 -c public -m ALL $IP:161 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v1.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v1.txt" "SNMP snmpwalk v1 enumeration scan"

	snmpwalk -v2c -c public $IP | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v2c.txt" "SNMP snmpwalk v2c enumeration scan"

	snmpwalk -v2c -c public -m ALL $IP:161 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c-all.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v2c-all.txt" "SNMP snmpwalk v2c extended enumeration scan"

	snmpwalk -v3 -l noAuthNoPriv -c public -m ALL $IP:161 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3.txt" "SNMP snmpwalk v3 enumeration scan"

	mkdir -p Netauto/$IP/Protocols/SNMP/snmp-check
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmp-check" "snmp-check"

	snmp-check $IP -p 161 -c public | tee Netauto/$IP/Protocols/SSH/snmp-check/snmp-check.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmp-check/snmp-check.txt" "SNMP snmp-check enumeration scan"

	mkdir -p Netauto/$IP/Protocols/SNMP/snmpwalk/v1
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1" "snmpwalk v1"

	# Interfaces
	snmpwalk -c public -v1 $IP 1.3.6.1.2.1.2.2 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/interfaces.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/interfaces.txt" "snmpwalk v1 interface"

	# Windows User Accounts
	snmpwalk -c public -v1 $IP 1.3.6.1.4.1.77.1.2.25 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/accounts.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/accounts.txt" "snmpwalk v1 Windows users account"

	# Windows Running Programs
	snmpwalk -c public -v1 $IP 1.3.6.1.2.1.25.4.2.1.2 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/programs.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/programs.txt" "snmpwalk v1 Windows running program"

	# Windows Hostname
	snmpwalk -c public -v1 $IP .1.3.6.1.2.1.1.5 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/hostname.txt
	path_check 
	"$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/hostname.txt" "snmpwalk v1 Windows hostname"

	# Windows Share Information
	snmpwalk -c public -v1 $IP 1.3.6.1.4.1.77.1.2.3.1.1 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/share-info.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/share-info.txt" "snmpwalk v1 Window share info"

	# More Windows Share Information
	snmpwalk -c public -v1 $IP 1.3.6.1.4.1.77.1.2.27 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/share-info-ext.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/share-info-ext.txt" "snmpwalk v1 extended Windows share info"

	# Windows TCP Ports
	snmpwalk -c public -v1 $IP 1.3.6.1.2.1.6.13.1.3 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/tcp-ports.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/tcp-ports.txt" "snmpwalk v1 TCP port"

	# Software Name
	snmpwalk -c public -v1 $IP 1.3.6.1.2.1.25.6.3.1.2 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/software-name.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/software-name.txt" "snmpwalk v1 software name"

	# SysLocation
	snmpwalk -c public -v1 $IP 1.3.6.1.2.1.1.6 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v1/syslocation.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v1/syslocation.txt" "snmpwalk v1 syslocation"

	mkdir -p Netauto/$IP/Protocols/SNMP/snmpwalk/v2c
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v2c" "snmpwalk v2c"

	# Interfaces
	snmpwalk -c public -v2c $IP 1.3.6.1.2.1.2.2 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c/interfaces.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v2c/interfaces.txt" "snmpwalk v2c interface"

	# Windows User Accounts
	snmpwalk -c public -v2c $IP 1.3.6.1.4.1.77.1.2.25 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v2c/accounts.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v2c/accounts.txt" "snmpwalk v2c Windows users account"

	# Windows Running Programs
	snmpwalk -c public -v2c $IP 1.3.6.1.2.1.25.4.2.1.2 | tee Netauto/$IP/Protocols/SNMP/snmpwalk/v2c/programs.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v2c/programs.txt" "snmpwalk v2c Windows running programs"

	# Windows Hostname
	snmpwalk -c public -v2c $IP .1.3.6.1.2.1.1.5 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c/v2c_windows_hostname.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v2c/hostname.txt" "snmpwalk v2c Windows hostname"

	# Windows Share Information
	snmpwalk -c public -v2c $IP 1.3.6.1.4.1.77.1.2.3.1.1 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c/v2c_windows_share_information.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v2c/share-info.txt" "snmpalk v2c Windows share info"

	# More Windows Share Information
	snmpwalk -c public -v2c $IP 1.3.6.1.4.1.77.1.2.27 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c/v2c_more_windows_share_information.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v2c/share-info-ext.txt" "snmpwalk v2c extended Windows share info"

	# Windows TCP Ports
	snmpwalk -c public -v2c $IP 1.3.6.1.2.1.6.13.1.3 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c/v2c_windows_tcp_ports.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v2c/tcp-ports.txt" "snmpwalk v2c Windows TCP port"

	# Software Name
	snmpwalk -c public -v2c $IP 1.3.6.1.2.1.25.6.3.1.2 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c/v2c_software_name.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v2c/software-name.txt" "snmpwalk v2c software name"

	# SysLocation
	snmpwalk -c public -v2c $IP 1.3.6.1.2.1.1.6 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v2c/v2c_syslocation.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v2c/syslocation.txt" "snmpwalk v2c syslocation"

	mkdir -p Netauto/$IP/Protocols/SNMP/snmpwalk/v3
	path_check "$(pwd)/Netauto/$IP/Protocols/SNMP/snmpwalk/v3" "snmpwalk v3"

	# Interfaces
	snmpwalk -c public -v3 $IP 1.3.6.1.2.1.2.2 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_interfaces.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/interfaces.txt" "snmpwalk v3 interface"

	# Windows User Accounts
	snmpwalk -c public -v3 $IP 1.3.6.1.4.1.77.1.2.25 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_windows_user_accounts.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/accounts.txt" "snmpwalk v3 Windows users account"

	# Windows Running Programs
	snmpwalk -c public -v3 $IP 1.3.6.1.2.1.25.4.2.1.2 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_windows_running_programs.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/programs.txt" "snmpwalk v3 Windows running programs"

	# Windows Hostname
	snmpwalk -c public -v3 $IP .1.3.6.1.2.1.1.5 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_windows_hostname.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/hostname.txt" "snmpwalk v3 Windows hostname"

	# Windows share Information
	snmpwalk -c public -v3 $IP 1.3.6.1.4.1.77.1.2.3.1.1 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_windows_share_information.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/share-info.txt" "snmpwalk v3 Windows share info"

	# More Windows Share Information
	snmpwalk -c public -v3 $IP 1.3.6.1.4.1.77.1.2.27 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_more_windows_share_information.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/share-info-ext.txt" "snmpwalk v3 extended Windows Share info"

	# Windows TCP Ports
	snmpwalk -c public -v3 $IP 1.3.6.1.2.1.6.13.1.3 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_windows_tcp_ports.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/tcp-ports.txt" "snmpwalk v3 Windows TCP ports"

	# Software Name
	snmpwalk -c public -v3 $IP 1.3.6.1.2.1.25.6.3.1.2 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_software_name.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/software-name.txt" "snmpwalk v3 software name"

	# SysLocation
	snmpwalk -c public -v3 $IP 1.3.6.1.2.1.1.6 | tee Netauto/$IP/Protocols/SSH/snmpwalk/v3/v3_syslocation.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/snmpwalk/v3/syslocation.txt" "snmpwalk v3 syslocation"

	echo " "
}

echo_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Echo on port 7${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Echo
	path_check "$(pwd)/Netauto/$IP/Protocols/Echo" "Echo"

	mkdir -p Netauto/$IP/Protocols/Echo/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/Echo/nc" "Echo netcat"

	nc $IP $port | tee Netauto/$IP/Protocols/Echo/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Echo/nc/nc.txt" "Echo netcat connection"

	nc -vn $IP $port | tee Netauto/$IP/Protocols/Echo/nc/nc_vn.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Echo/nc/nc.txt" "Echo verbose netcat connection"

	mkdir -p Netauto/$IP/Protocols/Echo/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Echo/nmap" "NMAP Echo"

	nmap -p 7 $IP -oN Netauto/$IP/Protocols/Echo/nmap/port.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Echo/nmap/port.nmap" "NMAP Echo port scan"

	echo " "
}

ftp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating FTP on port 21${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/ftp/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nc" "FTP netcat connection"

	nc $IP $port | tee Netauto/$IP/Protocols/ftp/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nc/nc.txt" "FTP netcat banner-grabbing connection"

	nc -vn $IP $port | tee Netauto/$IP/Protocols/ftp/nc/nc-nv.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nc/nc-nv.txt" "FTP netcat verbose connection"
	
	mkdir -p Netauto/$IP/Protocols/ftp/openssl
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/openssl" "FTP OpenSSL"

	openssl s_client -connect $IP:21 -starttls ftp | tee Netauto/$IP/Protocols/ftp/openssl/openssl.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/openssl/ftp-openssl.txt" "FTP OpenSSL banner-grabbing connection"

	mkdir -p Netauto/$IP/Protocols/ftp/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap" "NMAP FTP"

	nmap --script ftp-anon -p 21 $IP -oN Netauto/$IP/Protocols/ftp/nmap/anon.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap/anon.nmap" "NMAP FTP anonymous enumeration scan"
	
	nmap --script ftp-bounce -p 21 $IP -oN Netauto/$IP/Protocols/ftp/nmap/bounce.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap/bounce.nmap" "NMAP FTP bounce attack enumeration"
	
	nmap --script ftp-libopie -p 21 $IP -oN Netauto/$IP/Protocols/ftp/nmap/libopie.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap/libopie.nmap" "NMAP FTP CVE-2010-1938 vulnerability scan"

	nmap --script ftp-proftpd-backdoor -p 21 $IP -oN Netauto/$IP/Protocols/ftp/nmap/proftpd-backdoor.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap/proftpd-backdoor.nmap" "NMAP FTP ProFTPD backdoor scan"

	nmap --script ftp-syst -p 21 $IP -oN Netauto/$IP/Protocols/ftp/nmap/syst.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap/syst.nmap" "NMAP FTP SYST and STAT command enumeration"

	nmap --script ftp-vuln-cve2010-4221 -p 21 $IP -oN Netauto/$IP/Protocols/ftp/nmap/vuln-cve2010-4221.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap/vuln-cve2010-4221.nmap" "NMAP FTP CVE-2010-4221 vulnerability scan"

	nmap --script ftp-vuln* -p 21 $IP -oN Netauto/$IP/Protocols/ftp/nmap/vuln-all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap/vuln-all.nmap" "full NMAP FTP vulnerability scan"

	nmap --script "ftp-* and not brute"  -p 21 $IP -oN Netauto/$IP/Protocols/ftp/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ftp/nmap/all.nmap" "full NMAP FTP scan"

	echo " "
}

ssh_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating SSH on port 22${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/SSH/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nc" "SSH netcat"

	nc $IP 22 | tee Netauto/$IP/Protocols/SSH/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nc/nc.txt" "SSH netcat connection"

	nc -nv $IP 22 | tee Netauto/$IP/Protocols/SSH/nc/nc-nv.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nc/nc-nv.txt" "SSH netcat verbose connection"

	mkdir -p Netauto/$IP/Protocols/SSH/ssh-audit
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/ssh-audit""SSH ssh-audit"

	ssh-audit.py $IP | tee Netauto/$IP/Protocols/SSH/ssh-audit/ssh-audit.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/ssh-audit/ssh-audit.txt" "SSH ssh-audit auditing enumeration scan"

	mkdir -p Netauto/$IP/Protocols/SSH/ssh-keyscan
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/ssh-keyscan" "SSH ssh-keyscan"

	ssh-keyscan -t rsa $IP -p 22 | tee Netauto/$IP/Protocols/SSH/ssh-keyscan/rsa.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/ssh-keyscan/rsa.txt" "SSH public keys rsa enumeration"

	mkdir -p Netauto/$IP/Protocols/SSH/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap" "NMAP SSH"

	nmap -p 22 $IP --script ssh2-enum-algos -oN Netauto/$IP/Protocols/SSH/nmap/enum-algos.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap/enum-algos.nmap" "NMAP SSH algorithms enumeration scan"

	nmap -p 22 $IP --script ssh-hostkey --script-args ssh_hostkey=full -oN Netauto/$IP/Protocols/SSH/nmap/hostkey.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap/hostkey.nmap" "NMAP SSH hostkeys enumeration"

	nmap -p 22 $IP --script ssh-publickey-acceptance -oN Netauto/$IP/Protocols/SSH/nmap/publickey-acceptance.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap/publickey-acceptance.nmap" "NMAP SSH public key acceptance enumeration scan"

	nmap -p 22 $IP --script ssh-run -oN Netauto/$IP/Protocols/SSH/nmap/run.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap/run.nmap" "NMAP SSH remote commands enumeration scan"

	nmap -p 22 $IP --script ssh-auth-methods -oN Netauto/$IP/Protocols/SSH/nmap/auth-methods.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap/auth-methods.nmap" "NMAP SSH authentication methods enumeration scan"

	nmap --script ssh-auth-methods --script-args="ssh.user=username" -p 22 $IP -oN Netauto/$IP/Protocols/SSH/nmap/auth-methods-default.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap/auth-methods-default.nmap" "NMAP SSH default authentication methods enumeration scan"

	nmap -p 22 $IP --script ssh-auth-methods --script-args="ssh.user=root" -oN Netauto/$IP/Protocols/SSH/nmap/auth-methods-root.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap/auth-methods-root.nmap""NMAP SSH root authentication methods enumeration scan"

	nmap --script "ssh-* and not brute" -p 22 $IP -oN Netauto/$IP/Protocols/SSH/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SSH/nmap/all.nmap" "full NMAP SSH scan"

	echo " "
}

telnet_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Telnet on port 23${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Telnet/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/Telnet/nc" "Telnet netcat"

	nc $IP 23 | tee Netauto/$IP/Protocols/Telnet/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Telnet/nc/nc.txt" "Telnet netcat connection"

	nc -nv $IP 23 | tee Netauto/$IP/Protocols/Telnet/nc/nc-nv.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Telnet/nc/nc-nv.txt" "Telnet netcat verbose connection"

	mkdir -p Netauto/$IP/Protocols/Telnet/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Telnet/nmap" "NMAP Telnet"

	nmap -n -sV -Pn --script "*telnet* and safe" -p 23 $IP -oN Netauto/$IP/Protocols/Telnet/nmap/scripts.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Telnet/nmap/scripts.nmap" "full NMAP Telnet script scan"

	nmap --script telnet-encryption -p 23 $IP -oN Netauto/$IP/Protocols/Telnet/nmap/encryption.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Telnet/nmap/encryption.nmap" "NMAP Telnet encryption scan"

	nmap --script telnet-ntlm-info -p 23 $IP -oN Netauto/$IP/Protocols/Telnet/nmap/ntlm-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Telnet/nmap/ntlm-info.nmap" "NMAP Telnet NTLM info enumeration scan"
}

smtp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating SMTP on port 25, 465 & 587${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/SMTP/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nc" "SMTP netcat"

	nc $IP 25 | tee Netauto/$IP/Protocols/SMTP/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nc.txt""SMTP netcat connection"

	nc -nv $IP 25 | tee Netauto/$IP/Protocols/SMTP/smtp-nv.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nc-nv.txt" "SMTP netcat verbose connection"

	mkdir -p Netauto/$IP/Protocols/SMTP/openssl
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/openssl" "SMTP OpenSSL"

	openssl s_client -starttls smtp -connect $IP:25 | tee Netauto/$IP/Protocols/SMTP/openssl/starttls.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/openssl/starttls.txt""SMTP OpenSSL encrypted communication"

	openssl s_client -crlf -connect $IP:465 | tee Netauto/$IP/Protocols/SMTP/openssl/crlf.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/openssl/crlf.txt" "SMTP OpenSSL carriage return communication"

	openssl s_client -starttls smtp -crlf -connect $IP:587 | tee Netauto/$IP/Protocols/SMTP/openssl/starttls-crlf.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/openssl/starttls-crlf.txt" "SMTP OpenSSL encrypted carriage return communication"

	mkdir -p Netauto/$IP/Protocols/SMTP/df
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/df" "SMTP disk space usage"

	dif mx $IP | tee Netauto/$IP/Protocols/SMTP/df/domains.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/df/domains.txt" 
	
	mkdir -p Netauto/$IP/Protocols/SMTP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap" "NMAP SMTP"

	nmap --script smtp-commands -p 25,465,587 $IP -oN Netauto/$IP/Protocols/SMTP/nmap/commands.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/commands.nmap" "NMAP SMTP commands enumeration"

	nmap --script smtp-open-relay -p 25,465,587 $IP -oN Netauto/$IP/Protocols/SMTP/nmap/open-relay.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/open-relay.nmap" "NMAP SMTP mail relaying enumeration"

	nmap --script smtp-enum-users -p 25,465,587 $IP -oN Netauto/$IP/Protocols/SMTP/nmap/enum-users.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/enum-users.nmap""NMAP SMTP users enumeration scan"

	nmap --script smtp-strangeport -p- $IP -oN Netauto/$IP/Protocols/SMTP/nmap/strangeport.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/strangeport.nmap" "NMAP SMTP non-standard port scan"

	nmap --script smtp-ntlm-info --script-args smtp-ntlm-info.domain=example.com -p 25,465,587 $IP -oN Netauto/$IP/Protocols/SMTP/nmap/ntlm-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/ntlm-info.nmap""NMAP SMTP NTLM info enumeration"

	nmap --script smtp-vuln-cve2010-4344 -p 25,465,587 $IP -oN Netauto/$IP/Protocols/SMTP/nmap/vuln-cve2010-4344.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/vuln-cve2010-4344.nmap" "NMAP SMTP CVE-2010-4344 vulnerability scan"

	nmap --script smtp-vuln-cve2011-1720 -p 25,465,587 $IP -oN Netauto/$IP/Protocols/SMTPt/nmap/vuln-cve2011-1720.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/vuln-cve2011-1720.nmap" "NMAP SMTP CVE-2011-1720 vulnerability scan"

	nmap --script smtp-vuln-cve2011-1764 -p 25,465,587 $IP -oN Netauto/$IP/Protocols/SMTP/nmap/vuln-cve2011-1764.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/vuln-cve2011-1764.nmap" "NMAP SMTP CVE-2011-1764 vulnerability scan"

	nmap --script "smtp-* and not brute" -p 25,465,587 $IP -oN Netauto/$IP/Protocols/SMTP/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMTP/nmap/all.nmap" "full NMAP SMTP scan"

	echo " "
}

whois_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating WHOIS on port 113${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/WHOIS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/WHOIS/nmap" "NMAP WHOIS"

	nmap -sC -p 113	$IP -oN Netauto/$IP/Protocols/WHOIS/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/WHOIS/script.nmap" "NMAP WHOIS script scan"

	nmap -sV -p 113	$IP -oN Netauto/$IP/Protocols/WHOIS/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/WHOIS/version.nmap" "NMAP WHOIS version scan"

	nmap -sC -sV -p 113 $IP -oN Netauto/$IP/Protocols/WHOIS/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/WHOIS/service-version.nmap" "NMAP WHOIS service and version detection"

	echo " "
}

tacacs_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating TACACS on port 49${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/TACACS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TACACS/nmap" "NMAP TACACS"

	nmap -sC -p 49 $IP -oN Netauto/$IP/Protocols/TACACS/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TACACS/script.nmap" "NMAP TACACS script scan"

	nmap -sV -p 49 $IP -oN Netauto/$IP/Protocols/TACACS/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TACACS/version.nmap" "NMAP TACACS version scan"

	nmap -sC -sV -p 49 $IP -oN Netauto/$IP/Protocols/TACACS/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TACACS/service-version.nmap" "NMAP TACACS service and version detection"

	echo " "
}

dns_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating DNS on port 53${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/DNS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap" "NMAP DNS"

	nmap --script broadcast-dns-service-discovery -p- $IP -oN Netauto/$IP/Protocols/DNS/nmap/broadcast-dns-service-discovery.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/broadcast-dns-service-discovery.nmap" "NMAP DNS Broadcast DNS service discovery enumeration scan"

	nmap --script dns-blacklist -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/blacklist.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/blacklist.nmap" "NMAP DNS Blacklist enumeration scan"

	nmap --script dns-cache-snoop -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/cache-snoop.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/cache-snoop.nmap" "NMAP DNS cache snooping"

	nmap --script dns-check-zone -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/check-zone.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/check-zone.nmap" "NMAP DNS check zone"

	nmap --script dns-client-subnet-scan -p 53 $IP/24 -oN Netauto/$IP/Protocols/DNS/nmap/client-subnet-scan.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/client-subnet-scan.nmap" "NMAP DNS client subnet scan"

	nmap --script dns-fuzz -p 53 $IP/24 -oN Netauto/$IP/Protocols/DNS/nmap/fuzz.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/fuzz.nmap " "NMAP DNS Fuzz enumeration"
	
	nmap --script dns-ip6-arpa-scan -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/ip6-arpa-scan.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/ip6-arpa-scan.nmap" "NMAP DNS IPv6 Lookup Network Enumeration scan"

	nmap --script dns-nsec3-enum -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/nsec3-enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/nsec3-enum.nmap" "NMAP DNS Nsec3 Enumeration scan"

	nmap --script dns-nsid -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/nsid.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/nsid.nmap" "NMAP DNS NSID enumeration scan"

	nmap -sV --script dns-nsid -p53 -Pn $IP -oN Netauto/$IP/Protocols/DNS/nmap/nsid-extended.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/nsid-extended.nmap" "NMAP DNS extended NSID enumeration scan"

	nmap --script dns-random-srcport -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/random-srcport.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/random-srcport.nmap" "NAMP DNS random source port scan"

	nmap --script dns-random-txid -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/random-txid.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/random-txid.nmap" "NMAP DNS random rxid enumeration scan"

	nmap --script dns-nsec-enum --script-args dns-nsec-enum.domains vulnerable.com -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/nsec-enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/nsec-enum.nmap" "NMAP DNS Nsec enumeration"

	nmap --script dns-recursion -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/recursion.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/recursion.nmap" "NMAP DNS recursion scan"

	nmap --script dns-service-discovery -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/service-discovery.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/service-discovery.nmap" "NMAP DNS service discovery scan"

	nmap --script dns-srv-enum -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/srv-enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/srv-enum.nmap" "NMAP DNS server enumeration scan"

	nmap --script dns-update -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/update.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/update.nmap" "NMAP DNS update attempt"

	nmap --script dns-zeustracker -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/zeustracker.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/zeustracker.nmap" "NMAP DNS zeus botnet ip range scan"

	nmap --script dns-zone-transfer -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/zone-transfer.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/zone-transfer.nmap" "NMAP DNS zone transfer"

	nmap -sn -Pn --script fcrdns -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/fcrdns.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/fcrdns.nmap" "NMAP DNS Forward-confirmed DNS lookup"

	nmap --script "dns-* and not brute" -p 53 $IP -oN Netauto/$IP/Protocols/DNS/nmap/all.namp
	path_check "$(pwd)/Netauto/$IP/Protocols/DNS/nmap/all.namp" "full NMAP DNS scan"

	echo " "
}

tftp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating TFTP on port 69${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/TFTP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TFTP/nmap" "NMAP TFTP"

	nmap -sU -p 69 $IP -oN Netauto/$IP/Protocols/TFTP/nmap/open-ports.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TFTP/nmap/open-ports.nmap" "NMAP TFTP open ports scan"

	nmap --script tftp-version -p 69 $IP -oN Netauto/$IP/Protocols/TFTP/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TFTP/nmap/version.nmap" "NMAP TFTP version scan"

	nmap --script tftp-enum -p 69 $IP -oN Netauto/$IP/Protocols/TFTP/nmap/enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TFTP/nmap/enum.nmap" "NMAP TFTP enumeration scan"

	nmap -sU --script tftp-enum -p 69 $IP -oN Netauto/$IP/Protocols/TFTP/nmap/udp-enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TFTP/nmap/udp-enum.nmap" "NMAP TFTP UDP enumeration scan"

	nmap -sU -p 69 --script tftp-enum.nse --script-args tftp-enum.filelist=enumlist.txt $IP -oN Netauto/$IP/Protocols/TFTP/nmap/enumlist.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TFTP/nmap/enumlist.nmap" "NMAP TFTP enumeration list scan"

	nmap -n -Pn -sU -p 69 -sV --script tftp-enum $IP -oN Netauto/$IP/Protocols/TFTP/nmap/enum-extended.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/TFTP/nmap/enum-extended.nmap" "NMAP TFTP extended enumeration scan"

	echo " "
}

finger_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Finger on port 79${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Finger
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger" "Finger"

	mkdir -p Netauto/$IP/Protocols/Finger/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger/nc" "Finger netcat"

	nc $IP 79 | tee Netauto/$IP/Protocols/Finger/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger/nc/nc.txt" "finger netcat connection"

	nc -vn $IP 79 | tee Netauto/$IP/Protocols/Finger/nc/nc-vn.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger/nc/nc-vn.txt" "finger netcat verbose connection"

	mkdir -p Netauto/$IP/Protocols/Finger/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger/nmap" "NMAP Finger"

	nmap -sC -p 79 $IP -oN Netauto/$IP/Protocols/Finger/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger/script.nmap" "NMAP Finger script scan"

	nmap -sV -p 79 $IP -oN Netauto/$IP/Protocols/Finger/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger/version.nmap" "NMAP Finger version scan"

	nmap -sC -sV -p 79 $IP -oN Netauto/$IP/Protocols/Finger/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger/service-version.nmap" "NMAP Finger service and version detection"

	mkdir -p Netauto/$IP/Protocols/Finger/enumeration
	path_check "$(pwd)/Netauto/$IP/Protocols/Finger/enumeration" "finger enumeration"

	finger @$IP | tee Netauto/$IP/Protocols/finger/enumeration/users.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/users.txt" "finger logged users enumeration"

	finger user@$IP | tee Netauto/$IP/Protocols/finger/enumeration/user.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/user.txt" "finger logged user enumeration"

	finger -l user@$IP | tee Netauto/$IP/Protocols/finger/enumeration/user-format.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/user-format.txt" "finger logged user format enumeration"

	finger admin@$IP | tee Netauto/$IP/Protocols/finger/enumeration/admin.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/admin.txt" "finger logged admin enumeration"

	finger -l admin@$IP | tee Netauto/$IP/Protocols/finger/enumeration/admin-format.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/admin-format.txt" "finger logged admin format enumeration"

	finger root@$IP | tee Netauto/$IP/Protocols/finger/enumeration/root.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/root.txt" "finger logged root enumeration"

	finger -l root@$IP | tee Netauto/$IP/Protocols/finger/enumeration/root-format.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/root-format.txt" "finger logged root format enumeration"

	finger 0@$IP | tee Netauto/$IP/Protocols/finger/enumeration/zero-enumeration.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/zero-enumeration.txt" "finger zero enumeration"

	finger 'a b c d e f g h'@$IP | tee Netauto/$IP/Protocols/finger/enumeration/accounts.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/finger/enumeration/accounts.txt" "finger accounts enumeration"

	echo " "
}

kerberos_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Kerberos on port 88${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Kerberos/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kerberos/nmap" "NMAP Kerberos"

	nmap -sC -p 88 $IP -oN Netauto/$IP/Protocols/Kerberos/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kerberos/nmap/script.nmap" "NMAP Kerberos script scan"

	nmap -sV -p 88 $IP -oN Netauto/$IP/Protocols/Kerberos/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kerberos/nmap/version.nmap" "NMAP Kerberos version scan"

	nmap -sC -sV -p 88 $IP -oN Netauto/$IP/Protocols/Kerberos/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kerberos/nmap/script-and-version.nmap" "NMAP Kerberos service and version detection scan"

	nmap -p 88 --script=krb5-enum-users -oN Netauto/$IP/Protocols/Kerberos/nmap/enum-users.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kerberos/nmap/enum-users.nmap" "NMAP Kerberos users enumeration scan"

	echo " "
}

pop_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating POP on port 110${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/POP
	path_check "$(pwd)/Netauto/$IP/Protocols/POP" "POP"

	mkdir -p Netauto/$IP/Protocols/POP/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/nc" "POP netcat"

	nc $IP 110 | tee Netauto/$IP/Protocols/POP/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/nc/nc.txt" "POP netcat connection"
	
	nc -vn $IP 110 | tee Netauto/$IP/Protocols/POP/nc/nc-vn.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/nc/nc-vn.txt" "POP netcat verbose connection"

	mkdir -p Netauto/$IP/Protocols/POP/openssl
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/openssl" "POP OpenSSL"

	openssl s_client -connect $IP:995 -crlf -quiet | tee Netauto/$IP/Protocols/POP/openssl/crlf.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/openssl/crlf.txt" "POP OpenSSL carriage return communication"

	mkdir -p Netauto/$IP/Protocols/POP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/nmap" "NMAP POP"

	nmap --script "pop3-capabilities or pop3-ntlm-info" -sV -port 110,995 $IP -oN Netauto/$IP/Protocols/POP/nmap/cap-and-ntlm.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/nmap/cap-and-ntlm.nmap" "NMAP POP capabilities or NTLM info enumeration scan"

	nmap -p 110,995 --script pop3-ntlm-info $IP -oN Netauto/$IP/Protocols/POP/nmap/ntlm-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/nmap/ntlm-info.nmap" "NMAP POP NTLM info enumeration"

	nmap -p 110,995 --script pop3-capabilities $IP -oN Netauto/$IP/Protocols/POP/nmap/capabilities.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/POP/nmap/capabilities.nmap" "NMAP POP capabilities scan"

	echo " "
}

portmapper_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Portmapper on port 111${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Portmapper/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Portmapper/nmap" "NMAP Portmapper"

	nmap -sC -p 111 $IP -oN Netauto/$IP/Protocols/Portmapper/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Portmapper/script.nmap" "NMAP Portmapper script scan"

	nmap -sV -p 111 $IP -oN Netauto/$IP/Protocols/Portmapper/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Portmapper/version.nmap" "NMAP Portmapper version scan"

	nmap -sC -sV -p 111 $IP -oN Netauto/$IP/Protocols/Portmapper/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Portmapper/service-version.nmap" "NMAP Portmapper service and version detection scan"

	nmap -sSUC -p111 $IP -oN Netauto/$IP/Protocols/Portmapper/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Portmapper/info.nmap" "NMAP Portmapper info scan"

	echo " "
}

ident_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Ident on port 113${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Ident/nmap
	path_check "mkdir -p Netauto/$IP/Protocols/Ident/nmap" "NMAP Ident"

	nmap -sC -p 113	$IP -oN Netauto/$IP/Protocols/Ident/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Ident/nmap/script.nmap" "NMAP Ident script scan"
	
	nmap -sV -p 113	$IP -oN Netauto/$IP/Protocols/Ident/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Ident/nmap/version.nmap" "NMAP Ident version scan"

	nmap -sC -sV -p 113 $IP -oN Netauto/$IP/Protocols/Ident/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Ident/nmap/service-version.nmap" "NMAP Ident service and version detection scan"

	echo " "
}

ntp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating NTP on port 123${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/NTP
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP" "NTP"

	mkdir -p Netauto/$IP/Protocols/NTP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/nmap" "NMAP NTP"

	nmap -sU --script ntp-info -p 123 $IP -oN Netauto/$IP/Protocols/NTP/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/nmap/info.nmap" "NMAP NTP info scan"

	nmap -sU --script ntp-monlist -p 123 $IP -oN Netauto/$IP/Protocols/NTP/nmap/monlist.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/nmap/monlist.nmap" "NMAP NTP monitor data enumeration scan"

	nmap -sU --script "ntp* and not (dos or brute)" -p 123 $IP -oN Netauto/$IP/Protocols/NTP/nmap/udp-all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/nmap/udp-all.nmap" "full NMAP NTP scan"

	nmap -sU -sV --script "ntp* and not (dos or brute)" -p 123 $IP -oN Netauto/$IP/Protocols/NTP/nmap/udp-version-all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/nmap/udp-version-all.nmap" "full NMAP NTP version scan"

	nmap -sU -pU:123 -Pn -n --script=ntp-monlist $IP -oN Netauto/$IP/Protocols/NTP/nmap/aggressive-monlist.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/nmap/aggressive-monlist.nmap" "NMAP NTP aggressive monitor data enumeration scan"

	mkdir -p Netauto/$IP/Protocols/NTP/ntpq
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/ntpq" "NTPQ"

	ntpq -c readlist $IP | tee Netauto/$IP/Protocols/NTP/ntpq/readlist.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/ntpq/readlist.txt" "NTP NTPQ system variables enumeration"

	ntpq -c readvar $IP | tee Netauto/$IP/Protocols/NTP/ntpq/readvar.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/ntpq/readvar.txt" "NTP NTPQ specified peer variables enumeration"

	ntpq -c peers $IP | tee Netauto/$IP/Protocols/NTP/ntpq/peers.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/ntpq/peers.txt" "NTP NTPQ in-specc peers enumeration"

	ntpq -c associations $IP | tee Netauto/$IP/Protocols/NTP/ntpq/associations.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NTP/ntpq/associations.txt" "NTP NTPQ association identifiers enumeration"

	echo " "
}

msrpc_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating MSRPC on port 135${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/MSRPC/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/nmap" "NMAP MSRPC"

	nmap -sC -p 135	$IP -oN Netauto/$IP/Protocols/MSRPC/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/nmap/script.nmap" "NMAP MSRPC script scan"

	nmap -sV -p 135	$IP -oN Netauto/$IP/Protocols/MSRPC/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/nmap/version.nmap" "NMAP MSRPC version scan"

	nmap -sC -sV -p 135 $IP -oN Netauto/$IP/Protocols/MSRPC/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/nmap/service-version.nmap" "NMAP MSRPC service and version detection scan"

	nmap --script msrpc-enum -p 135 $IP -oN Netauto/$IP/Protocols/MSRPC/nmap/enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/nmap/enum.nmap" "NMAP MSRPC enumeration scan"

	mkdir -p Netauto/$IP/Protocols/MSRPC/rpcdump
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/rpcdump" "RPCDUMP"

	impacket-rpcdump -port 135 $IP | tee Netauto/$IP/Protocols/MSRPC/rpcdump/impacket-rpcdump.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/rpcdump/impacket-rpcdump.txt" "RPC endpoints enumeration"

	/usr/share/doc/python3-impacket/examples/rpcdump.py $IP -p 135 | tee Netauto/$IP/Protocols/MSRPC/rpcdump/rpcdump_port.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/rpcdump/rpcdump_port.txt" "RPC endpoint ports enumeration"

	/usr/share/doc/python3-impacket/examples/rpcmap.py 'ncacn_ip_tcp:$IP' | tee Netauto/$IP/Protocols/MSRPC/rpcdump/rpcmap.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/rpcdump/rpcmap.txt" "RPC mappings enumeration"

	python /opt/tools/MSRPC/IOXIDResolver.py -t $IP | tee Netauto/$IP/Protocols/MSRPC/rpcdump/IOXIDResolver.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/MSRPC/rpcdump/IOXIDResolver.txt" "RPC mapping and ip address interface enumeration"

	echo " "
}

netbios_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating NetBIOS on port 135, 137, 138, 139 & 445${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/NetBios/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap" ""

	nmap -sU -p 137,138,139 $IP -oN Netauto/$IP/Protocols/NetBios/nmap/udp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/udp.nmap" "NMAP NetBios UDP scan"

	nmap -vv --reason -Pn -sV -p139,445 --script="(nbstat or smb* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" --script-args="unsafe=1" $IP -oN Netauto/$IP/Protocols/NetBios/nmap/aggressive-udp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/aggressive-udp.nmap" "NMAP NetBios aggressive UDP scan"
	
	nmap -sT -p 137,139,445 $IP -oN Netauto/$IP/Protocols/NetBios/nmap/tcp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/tcp.nmap" "NMAP NetBios TCP scan"
	
	nmap -vv --reason -Pn -sU -sV -p137 --script="(nbstat or smb* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" --script-args="unsafe=1" $IP -oN Netauto/$IP/Protocols/NetBios/nmap/aggressive-tcp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/aggressive-tcp.nmap" "NMAP NetBios aggressive TCP scan"
	
	nmap -sC -p 137,139,445 $IP -oN Netauto/$IP/Protocols/NetBios/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/script.nmap" "NMAP NetBios script scan"
	
	nmap -sV -p 137,139,445 $IP -oN Netauto/$IP/Protocols/NetBios/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/version.nmap" "NMAP NetBios version scan"
	
	nmap -sC -sV -p 135,137,139,445 $IP -oN Netauto/$IP/Protocols/NetBios/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/script-and-version.nmap" "NMAP NetBios service and version detection scan"
	
	nmap --script broadcast-netbios-master-browser -p 135,137,139 $IP -oN Netauto/$IP/Protocols/NetBios/nmap/broadcast-netbios-master-browser.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/broadcast-netbios-master-browser.nmap" "NMAP NetBios broadcast netbios master browser enumeration scan"
	
	sudo nmap -sU -sV -T4 --script nbstat.nse -p137 -Pn -n $IP -oN Netauto/$IP/Protocols/NetBios/nmap/nbstat.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmap/nbstat.nmap" "NMAP NetBios nbstat enumeration scan"

	mkdir -p Netauto/$IP/Protocols/NetBios/nmblookup
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmblookup" "nmblookup"
	
	nmblookup -A $IP | tee Netauto/$IP/Protocols/NetBios/nmblookup/nmblookup.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nmblookup/nmblookup.txt" "Node status query enumeration"

	mkdir -p Netauto/$IP/Protocols/NetBios/nbtscan
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nbtscan" "nbtscan"
	
	nbtscan $IP | tee Netauto/$IP/Protocols/NetBios/nbtscan/default.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nbtscan/default.txt" "default NetBIOS enumeration scan"
	
	nbtscan -rvh $IP | tee Netauto/$IP/Protocols/NetBios/nbtscan/verbose.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nbtscan/verbose.txt" "verbose NetBIOS enumeration scan"
	
	nbtscan $IP/30 | tee Netauto/$IP/Protocols/NetBios/nbtscan/range-30.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/nbtscan/range-30.txt" "default NetBIOS ip range of 30 enumeration scan"

	nbtscan -r $IP/24 | tee Netauto/$IP/Protocols/NetBios/nbtscan/range-24.txt
	path_check "$(pwd)/tee Netauto/$IP/Protocols/NetBios/nbtscan/range-24.txt" "verbose NetBIOS ip range of 24 enumeration scan"

	mkdir -p Netauto/$IP/Protocols/NetBios/enum4linux
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/enum4linux" "enum4linux"
	
	enum4linux -a -M -l -d $IP | tee Netauto/$IP/Protocols/NetBios/enum4linux/enum4linux.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/enum4linux/enum4linux.txt" "verbose enum4linux NetBIOS enumeration scan"

	mkdir -p Netauto/$IP/Protocols/NetBios/rpcclient
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/rpcclient" "rpcclient"
	
	rpcclient -U "" -P $IP | tee Netauto/$IP/Protocols/NetBios/rpcclient/null_session_attempt.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NetBios/rpcclient/null_session_attempt.txt" "null session attempt rpcclient enumeration"

	echo " "
}

smb_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating SMB on port 445${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/SMB/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap" "NMAP SMB"

	nmap --script smb-enum-shares.nse,smb-enum-users.nse -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/enum-scripts.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/enum-scripts.nmap" "NMAP SMB shares and users script enumeration scan"

	nmap --script smb-enum* -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/enum-all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/enum-all.nmap" "all NMAP SMB enumeration scan"

	nmap --script smb-protocols -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/protocols.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/protocols.nmap" "NMAP SMB protocols scan"

	nmap --script smb-flood -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/flood.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/flood.nmap" "NMAP SMB connection limit detection"

	nmap --script smb-ls -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/list.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/list.nmap" "NMAP SMB files volumes information scan"

	nmap --script smb-mbenum -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/mbenum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/mbenum.nmap" "NMAP SMB Windows Master Browser Queries Information scan"

	nmap --script smb-os-discovery -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/os-discovery.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/os-discovery.nmap" "NMAP SMB Operation System Discovery scan"

	nmap --script smb-psexec -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/psexec.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/psexec.nmap" "NMAP SMB remote process execution psexec scan"

	nmap --script smb-security-mode -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/security-mode.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/security-mode.nmap" "NMAP SMB security level scan"

	nmap --script smb-server-stats -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/server-stats.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/server-stats.nmap" "NMAP SMB server stats enumeration scan"

	nmap --script smb-system-info -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/system-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/system-info.nmap" "NMAP SMB server information scan"

	nmap --script smb-webexec-exploit -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/webexec-exploit.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/webexec-exploit.nmap" "NMAP SMB WebExec vulnerability scan"

	nmap --script smb-double-pulsar-backdoor -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/double-pulsar-backdoor.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/double-pulsar-backdoor.nmap" "NMAP SMB Double Pulsar Backdoor scan"

	nmap --script smb-vuln* -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/vuln-all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/vuln-all.nmap" "full NMAP SMB vulnerability scan"

	nmap --script "smb-* and not brute" -p 445 $IP -oN Netauto/$IP/Protocols/SMB/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmap/all.nmap" "full NMAP SMB scan"

	mkdir -p Netauto/$IP/Protocols/SMB/nmblookup
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmblookup" "nmblookup"

	nmblookup -A $IP | tee Netauto/$IP/Protocols/SMB/nmblookup/nmblookup.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nmblookup/nmblookup.txt" "nmblookup node status query scan"

	mkdir -p Netauto/$IP/Protocols/SMB/nbtscan
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nbtscan" "nbtscan"

	nbtscan $IP | tee Netauto/$IP/Protocols/SMB/nbtscan/nbtscan.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nbtscan/nbtscan.txt" "nbtscan NetBIOS name information scan"

	nbtscan -r $IP/24 | tee Netauto/$IP/Protocols/SMB/nbtscan/recursive.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/nbtscan/recursive.txt" "nbtscan recursive NetBIOS name information ip range scan"

	mkdir -p Netauto/$IP/Protocols/SMB/enum4linux
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/enum4linux" "enum4linux"

	enum4linux $IP | tee Netauto/$IP/Protocols/SMB/enum4linux/enum4linux.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/enum4linux/enum4linux.txt" "enum4linux samba share enumeration scan"

	enum4linux -a $IP | tee Netauto/$IP/Protocols/SMB/enum4linux/all.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/enum4linux/all.txt" "full enum4linux samba share enumeration scan"

	enum4linux -v $IP | tee Netauto/$IP/Protocols/SMB/enum4linux/verbose.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/enum4linux/verbose.txt" "enum4linux verbose samba share enumeration scan"

	enum4linux -a -M -l -d $IP | tee Netauto/$IP/Protocols/SMB/enum4linux/extended.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/enum4linux/extended.txt" "extended enum4linux samba share enumeration scan"

	mkdir -p Netauto/$IP/Protocols/SMB/enum4linux-ng
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/enum4linux-ng" "enum4linux-ng"
	
	enum4linux-ng -A $IP | tee Netauto/$IP/Protocols/SMB/enum4linux-ng/all.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/enum4linux-ng/smb-enum4linux-ng-all.txt" "enum4linux-ng all simple enumeration scan"

	enum4linux-ng -As $IP | tee Netauto/$IP/Protocols/SMB/enum4linux-ng/all-short.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/enum4linux-ng/smb-enum4linux-short-all.txt" "enum4linux-ng all short simple enumeration scan"
	
	mkdir -p Netauto/$IP/Protocols/SMB/netexec
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/netexec" "netexec"

	netexec smb $IP/24 | tee Netauto/$IP/Protocols/SMB/netexec/range-scan.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/netexec/range-scan.txt" "network execution ip range SMB scan"

	netexec smb $IP | tee Netauto/$IP/Protocols/SMB/netexec/default.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/netexec/default.txt" "network execution SMB enumeration scan"

	netexec smb $IP -u '' -p '' --shares | tee Netauto/$IP/Protocols/SMB/netexec/null-sessions.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/netexec/null-sessions.txt" "network execution SMB null session enumeration scan"

	netexec smb $IP-1 $IP-2 | tee Netauto/$IP/Protocols/SMB/netexec/target-ip-scan.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/netexec/target-ip-scan.txt" "network execution SMB target IP scan"

	mkdir -p Netauto/$IP/Protocols/SMB/smbmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbmap" "smbmap"

	smbmap -H $IP | tee Netauto/$IP/Protocols/SMB/smbmap/enumeration.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbmap/enumeration.txt" "smbmap SMB shares enumeration"

	smbmap -H $IP -P 445 | tee Netauto/$IP/Protocols/SMB/smbmap/port-enumeration.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbmap/port-enumeration.txt" "smbmap SMB share port enumeration"

	smbmap -u null -p "" $IP -P 445 | tee Netauto/$IP/Protocols/SMB/smbmap/null-session.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbmap/null-session.txt" "smbmap SMB share null session enumeration"

	smbmap -u null -p "" $IP -P 445 -x "whoami" | tee Netauto/$IP/Protocols/SMB/smbmap/command-execution.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbmap/command-execution.txt" "smbmap SMB share command execution enumeration"

	mkdir -p Netauto/$IP/Protocols/SMB/crackmapexec
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/crackmapexec" "crackmapexec"

	crackmapexec smb $IP -u '' -p '' --shares | tee Netauto/$IP/Protocols/SMB/crackmapexec/null-session.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/crackmapexec/null-session.txt" "crackmapexec null users share enumeration"

	mkdir -p Netauto/$IP/Protocols/SMB/smbclient
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbclient" "smbclient"

	smbclient -L $IP | tee Netauto/$IP/Protocols/SMB/smbclient/directories.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbclient/directories.txt" "SMBclient directory enumeration scan"

	smbclient -N -L $IP | tee Netauto/$IP/Protocols/SMB/smbclient/directories-nopswd.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbclient/directories-nopswd.txt" "SMBclient directory no password enumeration scan"

	smbclient -L\\ -N -I $IP | tee Netauto/$IP/Protocols/SMB/smbclient/null-session.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbclient/null-session.txt" "SMBclient null session enumeration"

	smbclient --no-pass -L //$IP | tee Netauto/$IP/Protocols/SMB/smbclient/null-user.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/smbclient/null-user.txt" "SMBclient null user enumeration"

	mkdir -p Netauto/$IP/Protocols/SMB/rpcclient
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/rpcclient" "rpcclient"
	
	rpcclient -U "" -N $IP | tee Netauto/$IP/Protocols/SMB/rpcclient/null-sessions.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/rpcclient/null-sessions.txt" "rpcclient SMB null session enumeration"

	mkdir -p Netauto/$IP/Protocols/SMB/RID-Cycling-Attack
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/RID-Cycling-Attack" "RID Cycling Attack"

	impacket-lookupsid example.local/anonymous@$IP 20000 -no-pass | tee Netauto/$IP/Protocols/SMB/RID-Cycling-Attack/anon-nopass.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/RID-Cycling-Attack/anon-nopass.txt" "looksupid anonymous no pass authentication enumeration"

	impacket-lookupsid example.local/guest@$IP 20000 -no-pass | tee Netauto/$IP/Protocols/SMB/RID-Cycling-Attack/guest-nopass.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/RID-Cycling-Attack/guest-nopass.txt" "looksupid guest no pass authentication enumeration"

	impacket-lookupsid example.local/guest@$IP 20000 | tee Netauto/$IP/Protocols/SMB/RID-Cycling-Attack/guest.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/SMB/RID-Cycling-Attack/guest.txt" "looksupid guest authentication enumeration"

	echo " "
}

imap_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating IMAP on port 143 & 993${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/IMAP
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP" "IMAP"

	mkdir -p Netauto/$IP/Protocols/IMAP/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/nc" "IMAP netcat"

	nc $IP 143 | tee Netauto/$IP/Protocols/IMAP/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/nc/nc.txt" "IMAP netcat connection"

	nc -vn $IP 143 | tee Netauto/$IP/Protocols/IMAP/nc/nc-vn.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/nc/nc-vn.txt" "IMAP verbose netcat connection"

	mkdir -p Netauto/$IP/Protocols/IMAP/openssl
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/openssl" "IMAP OpenSSL"

	openssl s_client -connect $IP:993 | tee Netauto/$IP/Protocols/IMAP/openssl/openssl.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/openssl/openssl.txt" "IMAP OpenSSL communication"

	openssl s_client -connect $IP:993 -quiet | tee Netauto/$IP/Protocols/IMAP/openssl/quiet.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/openssl/quiet.txt" "IMAP OpenSSL quiet communication"

	mkdir -p Netauto/$IP/Protocols/IMAP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/nmap" "NMAP IMAP"

	nmap --script imap-capabilities -p 143,993 $IP -oN Netauto/$IP/Protocols/IMAP/nmap/capabilities.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/nmap/capabilities.nmap" "NMAP IMAP capabilities scan"

	nmap --script imap-ntlm-info -p 143,993 $IP -oN Netauto/$IP/Protocols/IMAP/nmap/ntlm-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IMAP/nmap/ntlm-info.nmap" "NMAP IMAP NTLM info enumeration"

	echo " "
}

irc_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating IRC on port 194 & from 6660 to 7000${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/IRC
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC" "IRC"

	mkdir -p Netauto/$IP/Protocols/IRC/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/nc" "IRC netcat"

	nc $IP 194 | tee Netauto/$IP/Protocols/IRC/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/nc/nc.txt" "IRC netcat connection"

	nc -vn $IP 194 | tee Netauto/$IP/Protocols/IRC/nc/nc-vn.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/nc/nc-vn.txt" "IRC verbose netcat connection"

	mkdir -p Netauto/$IP/Protocols/IRC/openssl
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/openssl" "IRC OpenSSL"

	openssl s_client -connect $IP:194 | tee Netauto/$IP/Protocols/IRC/openssl/openssl.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/openssl/openssl.txt" "IRC OpenSSL communication"

	openssl s_client -connect $IP:194 -quiet | tee Netauto/$IP/Protocols/IRC/openssl/quiet.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/openssl/quiet.txt" "IRC OpenSSL quiet communication"

	openssl s_client -connect $IP:6667 | tee Netauto/$IP/Protocols/IRC/openssl/openssl-port6667.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/openssl/openssl-6667.txt" "IRC port 6667 communication"

	openssl s_client -connect $IP:6667 -quiet | tee Netauto/$IP/Protocols/IRC/openssl/quiet-port6667.txt
	path_check "$(pwd)/tee Netauto/$IP/Protocols/IRC/openssl/quiet-port6667.txt" "IRC port 6667 quiet communication"

	mkdir -p Netauto/$IP/Protocols/IRC/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/nmap" "NMAP IRC"

	nmap --script irc-info,irc-botnet-channels,irc-unrealircd-backdoor -p 194,6660-7000 $IP -oN Netauto/$IP/Protocols/IRC/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/nmap/info.nmap" "NMAP IRC info scan"

	nmap -sV --script irc-info,irc-botnet-channels,irc-unrealircd-backdoor -p 194,6660-7000 $IP -oN Netauto/$IP/Protocols/IRC/nmap/info-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/nmap/info-version.nmap" "NMAP IRC version info scan"

	nmap -sV --script "irc-* and not brute" -p 194,6660-7000 $IP -oN Netauto/$IP/Protocols/IRC/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IRC/nmap/all.nmap" "full NMAP IRC scan"

	echo " "
}

checkpoint_firewall_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Checkpoint Firewall on port 264${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Checkpoint-Firewall
	path_check "$(pwd)/Netauto/$IP/Protocols/Checkpoint_Firewall" "Checkpoint Firewall"

	mkdir -p Netauto/$IP/Protocols/Checkpoint-Firewall/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Checkpoint-Firewall/nmap" "NMAP Checkpoint Firewall"

	nmap -sC -p 264 -oN Netauto/$IP/Protocols/Checkpoint-Firewall/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Checkpoint_Firewall-1/nmap/script.nmap" "NMAP Checkpoint Firewall script scan"

	nmap -sV -p 264 -oN Netauto/$IP/Protocols/Checkpoint-Firewall-1/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Checkpoint_Firewall-1/nmap/version.nmap" "NMAP Checkpoint Firewall version scan"

	nmap -sC -sV -p 264 -oN Netauto/$IP/Protocols/Checkpoint-Firewall/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Checkpoint_Firewall-1/nmap/service-version.nmap" "NMAP Checkpoint Firewall service and version detection scan"

	echo " "
}

ldap_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating LDAP on port 389${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/LDAP
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP" "LDAP"
	
	mkdir -p Netauto/$IP/Protocols/LDAP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/nmap" "NMAP LDAP"

	nmap --script ldap-search -p 389 $IP -oN Netauto/$IP/Protocols/LDAP/nmap/search.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/nmap/search.nmap" "NMAP LDAP"

	nmap --script ldap-novell-getpass -p 389 $IP -oN Netauto/$IP/Protocols/LDAP/nmap/novell-getpass.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/nmap/novell-getpass.nmap" "NMAP LDAP account information scan"

	nmap --script ldap-rootdse -p 389 $IP -oN Netauto/$IP/Protocols/LDAP/nmap/rootdse.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/nmap/rootdse.nmap" "NMAP LDAP root DSA-specific Entry (DSE) enumeration"

	nmap --script "ldap* and not brute" -p 389 $IP -oN Netauto/$IP/Protocols/LDAP/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/nmap/all.nmap" "full NMAP LDAP scan"

	nmap -n -sV --script "ldap* and not brute" $IP -oN Netauto/$IP/Protocols/LDAP/nmap/all-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/nmap/all-version.nmap" "full NMAP LDAP version scan"

	mkdir -p Netauto/$IP/Protocols/LDAP/ldapsearch
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/ldapsearch" "ldapsearch"

	ldapsearch -LLL -x -H ldap://$IP -b ‘’ -s base '(objectclass=*)' | tee Netauto/$IP/Protocols/LDAP/ldapsearch/anon-cred-dump.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/ldapsearch/anon-cred-dump.txt" "LDAPsearch Anonymous Credential Dumping"

	ldapsearch -h $IP -x -s base namingcontexts | tee Netauto/$IP/Protocols/LDAP/ldapsearch/naming-contexts.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/ldapsearch/naming-contexts.txt" "LDAPsearch naming contexts enumeration"

	ldapsearch -h $IP -x -b "DC=BLACKFIELD,DC=local" | tee Netauto/$IP/Protocols/LDAP/ldapsearch/domain-name.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/LDAP/ldapsearch/domain-name.txt" "LDAPsearch domain name enumeration"

	echo " "
}

ipsec_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating IPSEC on port 500${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/IKE
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE" "IKE"

	mkdir -p Netauto/$IP/Protocols/IKE/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE/nmap" "NMAP IKE"

	nmap -sU -p 500 $IP -oN Netauto/$IP/Protocols/IKE/nmap/udp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE/nmap/udp.nmap" "NMAP IKE UDP scan"

	nmap --script ike-version -p 500 $IP -oN Netauto/$IP/Protocols/IKE/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE/nmap/version.nmap" "NMAP IKE version script scan"

	nmap --script http-cisco-anyconnect -p 500 $IP -oN Netauto/$IP/Protocols/IKE/nmap/http-cisco-anyconnect.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE/nmap/http-cisco-anyconnect.nmap" "NMAP IKE AnyConnect client information scan"

	mkdir -p Netauto/$IP/Protocols/IKE/ike-scan
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE/ike-scan" "ike-scan"

	ike-scan -M $IP | tee Netauto/$IP/Protocols/IKE/ike-scan/default.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE/ike-scan/default.txt" "IKE scan discovery enumeration scan"

	ike-scan -M --showbackoff $IP | tee Netauto/$IP/Protocols/IKE/ike-scan/aggressive.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE/ike-scan/aggressive.txt" "IKE scan discovery aggressive enumeration scan"

	ike-scan -P -M -A -n fakeID $IP | tee Netauto/$IP/Protocols/IKE/ike-scan/fakeID.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IKE/ike-scan/fakeID.txt" "IKE scan fakeID detection scan"

	echo " "
}

modbus_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Modbus on port 502${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Modbus
	path_check "$(pwd)/Netauto/$IP/Protocols/Modbus" "Modbus"
	
	mkdir -p Netauto/$IP/Protocols/Modbus/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Modbus/nmap" "NMAP Modbus"

	nmap -sC -p 502 -oN Netauto/$IP/Protocols/Modbus/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Modbus/nmap/script.nmap" "NMAP Modbus script scan"

	nmap -sV -p 502 -oN Netauto/$IP/Protocols/Modbus/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Modbus/nmap/version.nmap" "NMAP Modbus version scan"

	nmap -sC -sV -p 502 -oN Netauto/$IP/Protocols/Modbus/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Modbus/nmap/service-version.nmap" "NMAP Modbus service and version detection scan"

	nmap --script modbus-discover -p 502 $IP -oN Netauto/$IP/Protocols/Modbus/nmap/discover.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Modbus/nmap/discover.nmap" "NMAP Modbus discovery scan"

	nmap --script modbus-discover --script-args modbus-discover.aggressive=true -p 502 $IP -oN Netauto/$IP/Protocols/Modbus/nmap/aggressive-discover.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Modbus/nmap/aggressive-discover.nmap" "NMAP Modbus aggressive discovery scan"

	echo " "
}

rexec_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Rexec on port 512${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Rexec
	path_check "$(pwd)/Netauto/$IP/Protocols/Rexec" "Rexec"

	mkdir -p Netauto/$IP/Protocols/Rexec/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rexec/nmap" "NMAP Rexec"

	nmap -sC -p 512 $IP -oN Netauto/$IP/Protocols/Rexec/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rexec/nmap/script.nmap" "NMAP Rexec script scan"

	nmap -sV -p 512 $IP -oN Netauto/$IP/Protocols/Rexec/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rexec/nmap/version.nmap" "NMAP Rexec version scan"

	nmap -sC -sV -p 512 $IP -oN Netauto/$IP/Protocols/Rexec/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rexec/nmap/service-version.nmap" "NMAP Rexec service and version detection scan"

	echo " "
}

rlogin_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Rlogin on port 513${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Rlogin
	path_check "$(pwd)/Netauto/$IP/Protocols/Rlogin" "Rlogin"

	mkdir -p Netauto/$IP/Protocols/Rlogin/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rlogin/nmap" "NMAP Rlogin"

	nmap -sC -p 513 $IP -oN Netauto/$IP/Protocols/Rlogin/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rlogin/nmap/script.nmap" "NMAP Rlogin script scan"

	nmap -sV -p 513 $IP -oN Netauto/$IP/Protocols/Rlogin/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rlogin/nmap/version.nmap" "NMAP Rlogin version scan"

	nmap -sC -sV -p 513 $IP -oN Netauto/$IP/Protocols/Rlogin/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rlogin/nmap/service-version.nmap" "NMAP Rlogin service and version detection scan"

	echo " "
}

rsh_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Rsh on port 514${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Rsh
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsh" "Rsh"

	mkdir -p Netauto/$IP/Protocols/Rsh/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsh/nmap" "NMAP Rsh"

	nmap -sC -p 514 $IP -oN Netauto/$IP/Protocols/Rsh/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsh/nmap/script.nmap" "NMAP Rsh script scan"

	nmap -sV -p 514 $IP -oN Netauto/$IP/Protocols/Rsh/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsh/nmap/version.nmap" "NMAP Rsh version scan"

	nmap -sC -sV -p 514 $IP -oN Netauto/$IP/Protocols/Rsh/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsh/nmap/service-version.nmap" "NMAP Rsh service and version detection scan"

	echo " "
}

lpd_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating LPD on port 515${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/LPD
	path_check "$(pwd)/Netauto/$IP/Protocols/LPD" "LPD"
	
	mkdir -p Netauto/$IP/Protocols/LPD/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LPD/nmap" "NMAP LPD"

	nmap -sC -p 515 $IP -oN Netauto/$IP/Protocols/LPD/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LPD/nmap/script.nmap" "NMAP LPD script scan"

	nmap -sV -p 515 $IP -oN Netauto/$IP/Protocols/LPD/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LPD/nmap/version.nmap" "NMAP LPD version scan"

	nmap -sC -sV -p 515 $IP -oN Netauto/$IP/Protocols/LPD/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/LPD/nmap/service-version.nmap" "NMAP LPD sercice and version detection scan"

	echo " "
}

afp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating AFP on port 548${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/AFP
	path_check "$(pwd)/Netauto/$IP/Protocols/AFP" "AFP"

	mkdir -p Netauto/$IP/Protocols/AFP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AFP/nmap" "NMAP AFP"
	
	nmap --script afp-ls -p 548 $IP -oN Netauto/$IP/Protocols/AFP/nmap/list.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AFP/nmap/list.nmap" "NMAP AFP directories enumeration scan"

	nmap --script afp-path-vuln -p 548 $IP -oN Netauto/$IP/Protocols/AFP/nmap/path-vuln.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AFP/nmap/path-vuln.nmap" "NMAP AFP MAC OS X directory traversal CVE-2010-0533 vulnerability scan"

	nmap --script afp-serverinfo -p 548 $IP -oN Netauto/$IP/Protocols/AFP/nmap/serverinfo.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AFP/nmap/serverinfo.nmap" "NMAP AFP server info scan"

	nmap --script afp-showmount -p 548 $IP -oN Netauto/$IP/Protocols/AFP/nmap/showmount.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AFP/nmap/showmount.nmap" "NMAP AFP shares and ACLs enumeration scan"

	nmap -sV --script "afp-* and not dos and not brute" -p 548 $IP -oN Netauto/$IP/Protocols/APF/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/APF/nmap/all.nmap" "full NMAP AFP scan"

	echo " "
}

rtsp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating RTSP on port 554 & 8554${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/RTSP
	path_check "$(pwd)/Netauto/$IP/Protocols/RTSP" "RTSP"

	mkdir -p Netauto/$IP/Protocols/RTSP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RTSP/nmap" "NMAP RTSP"

	nmap --script rtsp-url-brute -p 554 $IP -oN Netauto/$IP/Protocols/RTSP/nmap/url-brute.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RTSP/nmap/url-brute.nmap" "NMAP RTSP url brute enumeration scan"

	nmap --script rtsp-methods -p 554 $IP -oN Netauto/$IP/Protocols/RTSP/nmap/methods.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RTSP/nmap/methods.nmap" "NMAP RTSP methods enumeration scan"

	nmap --script rtsp-* -p 554,8554 $IP -oN Netauto/$IP/Protocols/RTSP/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RTSP/nmap/all.nmap" "full NMAP RTSP scan"

	nmap -sV --script "rtsp-*" -p 554,8554 $IP -oN Netauto/$IP/Protocols/RTSP/nmap/all-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RTSP/nmap/all-version.nmap" "full NMAP RTSP version scan"

	echo " "
}

ipmi_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating IPMI on port 623${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/IPMI
	path_check "$(pwd)/Netauto/$IP/Protocols/IPMI" "IPMI"

	mkdir -p Netauto/$IP/Protocols/IPMI/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IPMI/nmap" "NMAP IPMI"

	nmap -n -p 623 $IP -oN Netauto/$IP/Protocols/IPMI/nmap/scan.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IPMI/nmap/scan.nmap" "NMAP IPMI network scan"

	nmap -n-sU -p 623 $IP -oN Netauto/$IP/Protocols/IPMI/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IPMI/nmap/info-scan.nmap" "NMAP IPMI info scan"

	nmap -sU --script ipmi-version -p 623 $IP -oN Netauto/$IP/Protocols/IPMI/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IPMI/nmap/version.nmap" "NMAP IPMI version script scan"

	echo " "
}

ipp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating IPP on port 631${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/IPP
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP" "IPP"

	mkdir -p Netauto/$IP/Protocols/IPP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/nmap" "NMAP IPP"

	nmap -sV -p631 --script=cups* $IP -oN Netauto/$IP/Protocols/IPP/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/nmap/all.nmap" "full NMAP IPP scan"

	nmap -sV -p631 --script=cups-info $IP -oN Netauto/$IP/Protocols/IPP/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/nmap/info.nmap" "NMAP IPP info script scan"

	nmap -sV -p631 --script=cups-queue-info $IP -oN Netauto/$IP/Protocols/IPP/nmap/queue-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/nmap/queue-info.nmap" "NMAP IPP queue info scan"

	curl http:/$IP:631 | tee Netauto/$IP/Protocols/IPP/curl.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/curl.txt" "IPP HTTP curl request"

	mkdir -p Netauto/$IP/Protocols/IPP/PRET
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/PRET" "PRET"

	python2 /opt/tools/IPP/PRET/pret.py $IP:631 ps | tee Netauto/$IP/Protocols/IPP/PRET/ps.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/PRET/ps.txt" "PRET PostScript enumeration scan"

	python2 /opt/tools/IPP/PRET/pret.py $IP:631 pjl | tee Netauto/$IP/Protocols/IPP/PRET/pjl.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/PRET/pjl.txt" "PRET Printer Job Language enumeration scan"

	python2 /opt/tools/IPP/PRET/pret.py $IP:631 pcl | tee Netauto/$IP/Protocols/IPP/PRET/pcl.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/IPP/PRET/pcl.txt" "PRET Printer Control Language enumeration scan"

	echo " "
}

epp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating EPP on port 700${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/EPP
	path_check "$(pwd)/Netauto/$IP/Protocols/EPP" "EPP"

	mkdir -p Netauto/$IP/Protocols/EPP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EPP/nmap" "NMAP EPP"

	nmap -sC -p 700 $IP -oN Netauto/$IP/Protocols/EPP/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EPP/nmap/script.nmap" "NMAP EPP script scan"

	nmap -sV -p 700 $IP -oN Netauto/$IP/Protocols/EPP/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EPP/nmap/version.nmap" "NMAP EPP version scan"

	nmap -sC -sV -p 700 $IP -oN Netauto/$IP/Protocols/EPP/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EPP/nmap/service-version.nmap" "NMAP EPP service and version detection scan"

	echo " "
}

rsync_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Rsync on port 873${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Rsync
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync" "Rsync"

	mkdir -p Netauto/$IP/Protocols/Rsync/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/nmap" "NMAP Rsync"

	nmap --script rsync-list-modules -p 873 $IP -oN Netauto/$IP/Protocols/Rsync/nmap/modules.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/nmap/modules.nmap" "NMAP Rsync modules availability enumeration scan"

	mkdir -p Netauto/$IP/Protocols/Rsync/rsync
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/rsync" "rsync"

	rsync $IP:: | tee Netauto/$IP/Protocols/Rsync/rsync/data.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/rsync/data.txt" "rsync list sync data enumeration"

	rsync -av --list-only rsync://$IP | tee Netauto/$IP/Protocols/Rsync/rsync/sync-only.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/rsync/sync-only.txt" "rsync extended list sync data enumeration"

	rsync $IP::files | tee Netauto/$IP/Protocols/Rsync/rsync/files.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/rsync/files.txt" "list subdirectory content enumeration"

	rsync $IP::files/tmp/ | tee Netauto/$IP/Protocols/Rsync/rsync/recursive.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/rsync/recursive.txt" "recurisve subdirectory and file enumeration"

	mkdir -p Netauto/$IP/Protocols/Rsync/rsync/shares
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/rsync/shares" "rsync shares"

	rsync $IP::shares | tee Netauto/$IP/Protocols/Rsync/rsync/shares/shares.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/rsync/shares/shares.txt" "rsync share enumeration"

	rsync -av --list-only rsync://$IP:873/shares | tee Netauto/$IP/Protocols/Rsync/rsync/shares/shares-ls.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Rsync/rsync/shares/shares-ls.txt" "rsync list sync share data enumeration"

	echo " "
}

rusersd_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Rusersd on port 1026${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Rusersd
	path_check "$(pwd)/Netauto/$IP/Protocols/Rusersd" "Rusersd"

	mkdir -p Netauto/$IP/Protocols/Rusersd/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rusersd/nmap" "NMAP Rusersd"

	nmap -sC -p 1026 $IP -oN Netauto/$IP/Protocols/Rusersd/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rusersd/nmap/script.nmap" "NMAP Rusersd script scan"
	
	nmap -sV -p 1026 $IP -oN Netauto/$IP/Protocols/Rusersd/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rusersd/nmap/version.nmap" "NMAP Rusersd version scan"

	nmap -sC -sV -p 1026 $IP -oN Netauto/$IP/Protocols/Rusersd/nmap/script-and-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Rusersd/nmap/script-and-version.nmap" "NMAP Rusersd service and version detection scan"

	mkdir -p Netauto/$IP/Protocols/Rusersd/rusers
	path_check "$(pwd)/Netauto/$IP/Protocols/Rusersd/rusers" "rusers"
	
	rusers -l $IP | tee Netauto/$IP/Protocols/Rusersd/rusers/ls.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Rusersd/rusers/ls.txt" "rusers active users enumeration"

	echo " "
}

socks_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating SOCKS on port 1080${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/SOCKS
	path_check "$(pwd)/Netauto/$IP/Protocols/SOCKS" "SOCKS"
	
	mkdir -p Netauto/$IP/Protocols/SOCKS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SOCKS/nmap" "NMAP SOCKS"

	nmap -p 1080 $IP --script socks-auth-info -oN Netauto/$IP/Protocols/SOCKS/nmap/auth-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SOCKS/nmap/auth-info.nmap" "NMAP SOCKS authentication info enumeration"

	nmap --script socks-open-proxy -p 1080 $IP -oN Netauto/$IP/Protocols/SOCKS/nmap/open-proxy.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SOCKS/nmap/open-proxy.nmap" "NMAP SOCKS open proxy enumeration"

	echo " "
}

java_rmi_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Java RMI${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Java-RMI
	path_check "$(pwd)/Netauto/$IP/Protocols/Java-RMI" ""
	
	mkdir -p Netauto/$IP/Protocols/Java-RMI/nmap/
	path_check "$(pwd)/Netauto/$IP/Protocols/Java-RMI/nmap/" "NMAP Java RMI"

	nmap -p- $IP -oN Netauto/$IP/Protocols/Java-RMI/nmap/port.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Java-RMI/nmap/port.nmap" "NMAP Java RMI port enumeration scan"

	nmap -Pn $IP -p- -oN Netauto/$IP/Protocols/Java-RMI/nmap/open-port.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Java-RMI/nmap/open-port.nmap" "NMAP Java RMI open port enumeration scan"

        nmap -n -v -sU -p- -T5 $IP -oN Netauto/$IP/Protocols/Java-RMI/nmap/aggressive-udp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Java-RMI/nmap/udp-scan.nmap" "NMAP Java RMI aggressive UDP enumeration scan"

        nmap -n -v -sU $IP -oN Netauto/$IP/Protocols/Java-RMI/nmap/udp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Java-RMI/nmap/udp.nmap" "NMAP Java RMI UDP enumeration scan"

        nmap -n -v -sT -p- -T5 $IP -oN Netauto/$IP/Protocols/Java-RMI/nmap/aggressive-tcp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Java-RMI/nmap/tcp-scan.nmap" "NMAP Java RMI aggressive TCP scan enumeration scan"

	echo " "
}

ibm_mq_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating IBM MQ on port 1414${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate IBM MQ${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/IBM-MQ
	path_check "$(pwd)/Netauto/$IP/Protocols/IBM-MQ" "IBM-MQ"

	mkdir -p Netauto/$IP/Protocols/IBM-MQ/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IBM-MQ/nmap" "NMAP IBM-MQ"

	nmap -sC -p 1414 $IP -oN Netauto/$IP/Protocols/IBM-MQ/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IBM-MQ/nmap/script.nmap" "NMAP IBM-MQ script scan"

	nmap -sV -p 1414 $IP -oN Netauto/$IP/Protocols/IBM-MQ/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IBM-MQ/nmap/version.nmap" "NMAP IBM-MQ version scan"

	nmap -sC -sV -p 1414 $IP -oN Netauto/$IP/Protocols/IBM-MQ/nmap/service-detection.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/IBM-MQ/nmap/service-detection.nmap" "NMAP IBM-MQ service and version detection scan"

	echo " "
}

pptp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating PPTP on port 1723${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/PPTP/
	path_check "$(pwd)/Netauto/$IP/Protocols/PPTP/" "PPTP"
	
	mkdir -p Netauto/$IP/Protocols/PPTP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/PPTP/nmap" "NMAP PPTP"

	nmap –Pn -sSV -p1723 $IP -oN Netauto/$IP/Protocols/PPTP/nmap/ports.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/PPTP/nmap/ports.nmap" "NMAP PPTP port enumeration scan"

	nmap --script pptp-version -p 1723 $IP -oN Netauto/$IP/Protocols/PPTP/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/PPTP/nmap/version.nmap" "NMAP PPTP version script scan"

	echo " "
}

mqtt_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating MQTT on port 1883${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/MQTT/
	path_check "$(pwd)/Netauto/$IP/Protocols/MQTT/" "MQTT"

	mkdir -p Netauto/$IP/Protocols/MQTT/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/MQTT/nmap" "NMAP MQTT"

	nmap --script mqtt-subscribe -p 1883 $IP -oN Netauto/$IP/Protocols/MQTT/nmap/mqtt-subscribe.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/MQTT/nmap/mqtt-subscribe.nmap" "NMAP MQTT message traffic enumeration"

	echo " "
}

nfs_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating NFS on port 111 & 2049${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate NFS${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/NFS/
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/" "NFS"

	mkdir -p Netauto/$IP/Protocols/NFS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/nmap" "NMAP NFS"

	nmap -sC -p2049 $IP -oN Netauto/$IP/Protocols/NFS/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/nmap/script.nmap" "NMAP NFS script scan"

	nmap --script nfs-ls -p 111,2049 $IP -oN Netauto/$IP/Protocols/NFS/nmap/ls.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/nmap/ls.nmap" "NMAP NFS file exports directory enumeration"

	nmap --script nfs-showmount -p 111,2049 $IP -oN Netauto/$IP/Protocols/NFS/nmap/showmount.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/nmap/showmount.nmap" "NMAP NFS exports enumeration"

	nmap --script nfs-statfs -p 111,2049 $IP -oN Netauto/$IP/Protocols/NFS/nmap/statfs.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/nmap/statfs.nmap" "NMAP NFS disk space statistics and info enumeration scan"

	nmap --script=nfs-ls,nfs-statfs,nfs-showmount -p 111,2049 $IP -oN Netauto/$IP/Protocols/NFS/nmap/script-scan.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/nmap/script-scan.nmap" "NMAP NFS extended script scan"

	sudo nmap -Pn -n --open -p111 --script=nfs-ls,nfs-showmount,nfs-statfs,rpcinfo $IP/24 -oN Netauto/$IP/Protocols/NFS/nmap/subnet.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/nmap/subnet.nmap" "NMAP NFS ip range subnet of 24 enumeration scan"

	nmap -Pn -n -T4 -sV --script=rpcinfo -p111 $IP -oN Netauto/$IP/Protocols/NFS/nmap/rpcinfo.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/nmap/rpcinfo.nmap" "NMAP NFS rpcinfo script scan"

	mkdir -p Netauto/$IP/Protocols/NFS/showmount
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/showmount" "showmount"

	showmount -e $IP | tee Netauto/$IP/Protocols/NFS/showmount/showmount.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/showmount/showmount.txt" "showmount NFS export enumeration scan"

	mkdir -p Netauto/$IP/Protocols/NFS/rpcinfo
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/rpcinfo" "rpcinfo"

	rpcinfo -p $IP | tee Netauto/$IP/Protocols/NFS/showmount/rpcinfo/rpcinfo.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/NFS/showmount/rpcinfo/rpcinfo.txt" "rpcinfo RPC service enumeration"

	echo " "
}

compaq_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Compaq${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/compaq/
	path_check "$(pwd)/Netauto/$IP/Protocols/compaq/" "Compaq"

	mkdir -p Netauto/$IP/Protocols/compaq/nmap/
	path_check "$(pwd)/Netauto/$IP/Protocols/compaq/nmap/" "NMAP Compaq"

	nmap -p- $IP -oN Netauto/$IP/Protocols/compaq/nmap/port.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/compaq/nmap/port.nmap" "NMAP Compaq port enumeration scan"

	nmap -Pn $IP -p- -oN Netauto/$IP/Protocols/compaq/nmap/open-port.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/compaq/nmap/open-port.nmap" "NMAP Compaq open port enumeration scan"

        nmap -n -v -sU -p- -T5 $IP -oN Netauto/$IP/Protocols/compaq/nmap/aggressive-udp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/compaq/nmap/udp-scan.nmap" "NMAP Compaq aggressive UDP scan"

        nmap -n -v -sU $IP -oN Netauto/$IP/Protocols/compaq/nmap/udp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/compaq/nmap/udp.nmap" "NMAP Compaq UDP scan"

        nmap -n -v -sT -p- -T5 $IP -oN Netauto/$IP/Protocols/compaq/nmap/aggressive-tcp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/compaq/nmap/aggressive-tcp.nmap" "NMAP Compaq aggressive TCP scan"

        nmap -n -v -sT -p- $IP -oN Netauto/$IP/Protocols/compaq/nmap/tcp.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/compaq/nmap/aggressive-tcp.nmap" "NMAP Compaq TCP scan"

	echo " "
}

docker_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Docker on port 2375 & 2376${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Docker/
	path_check "$(pwd)/Netauto/$IP/Protocols/Docker/" "Docker"

	mkdir -p Netauto/$IP/Protocols/Docker/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Docker/nmap" "NMAP Docker"

	map --script docker-version -p 2375,2376 $IP -oN Netauto/$IP/Protocols/Docker/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Docker/nmap/version.nmap" "NMAP Docker version script scan"

	nmap -sV --script "docker-* and not brute" -p 2375,2376 $IP -oN Netauto/$IP/Protocols/Docker/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Docker/nmap/all.nmap" "full NMAP Docker scan"

	echo " "
}

squid_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Squid on port 3128${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Squid/
	path_check "$(pwd)/Netauto/$IP/Protocols/Squid/" "Squid"

	curl --proxy http://$IP:3128 http://$IP | tee Netauto/$IP/Protocols/Squid/proxy.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Squid/proxy.txt" "HTTP Squid curl proxy request"

	python /opt/tools/Squid/spose/spose.py --proxy http://$IP:3128 --target $IP | tee Netauto/$IP/Protocols/Squid/spose.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Squid/spose.txt" "Spose open port enumeration scan"
}

iscsi_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating ISCSI on port 3260${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/ISCSI/
	path_check "$(pwd)/Netauto/$IP/Protocols/ISCSI/" "ISCSI"

	mkdir -p Netauto/$IP/Protocols/ISCSI/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ISCSI/nmap" "NMAP ISCSI"

	nmap -sV --script=iscsi-info -p 3260 $IP -oN Netauto/$IP/Protocols/ISCSI/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ISCSI/nmap/info.nmap" "NMAP ISCSI info script enumeration scan"

	nmap --script "iscsi-* and not brute" -p 3260 $IP -oN Netauto/$IP/Protocols/ISCSI/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ISCSI/nmap/all.nmap" "full NMAP ISCSI scan"

	echo " "
}

rdp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating RDP on port 3389${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate RDP${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/RDP/
	path_check "$(pwd)/Netauto/$IP/Protocols/RDP/" "RDP"

	mkdir -p Netauto/$IP/Protocols/RDP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RDP/nmap" "NMAP RDP"

	nmap --script rdp-enum-encryption -p 3389 $IP -oN Netauto/$IP/Protocols/RDP/nmap/enc.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RDP/nmap/enc.nmap" "NMAP RDP enumerating encryption scan"

	nmap --script rdp-ntlm-info -p 3389 $IP -oN Netauto/$IP/Protocols/RDP/nmap/ntlm-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RDP/nmap/ntlm-info.nmap" "NMAP RDP NTLM info scan"

	nmap --script rdp-vuln-ms12-020 -p 3389 $IP -oN Netauto/$IP/Protocols/RDP/nmap/vuln-ms12-020.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RDP/nmap/vuln-ms12-020.nmap" "NMAP RDP MS12-020 vulnerability"

	nmap --script "rdp* and not brute" -p 3389 $IP -oN Netauto/$IP/Protocols/RDP/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RDP/nmap/all.nmap" "full NMAP RDP scan"

	nmap --script "rdp-enum-encryption or rdp-vuln-ms12-020 or rdp-ntlm-info" -p 3389 -T4 $IP -oN Netauto/$IP/Protocols/RDP/nmap/aggressive-scan.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RDP/nmap/aggressive-scan.nmap" "NMAP RDP aggressive script scan"

	sudo nmap -Pn -n --open -p3389 --script=rdp-vuln-ms12-020,rdp-enum-encryption $IP/24 -oN Netauto/$IP/Protocols/RDP/nmap/subnet.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RDP/nmap/subnet.nmap" "NMAP RDP subnet scan"

	echo " "
}

saprouter_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating SAPRouter on port 3299${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/SAPRouter/
	path_check "$(pwd)/Netauto/$IP/Protocols/SAPRouter/" "SAPRouter"

	mkdir -p Netauto/$IP/Protocols/SAPRouter/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SAPRouter/nmap" "NMAP SAPRouter"

	nmap -sC -p 3299 $IP -oN Netauto/$IP/Protocols/SAPRouter/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SAPRouter/nmap/script.nmap" "NMAP SAPRouter script scan"

	nmap -sV -p 3299 $IP -oN Netauto/$IP/Protocols/SAPRouter/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SAPRouter/nmap/version.nmap" "NMAP SAPRouter version scan"

	nmap -sC -sV -p 3299 $IP -oN Netauto/$IP/Protocols/SAPRouter/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/SAPRouter/nmap/service-version.nmap" "NMAP SAPRouter service and version scan"

	echo " "
}

distcc_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Distcc on port 3632${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/distcc/
	path_check "$(pwd)/Netauto/$IP/Protocols/distcc/" "distcc"

	mkdir -p Netauto/$IP/Protocols/distcc/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/distcc/nmap" "NMAP distcc"
	
	nmap -p 3632 $IP --script distcc-cve2004-2687 --script-args="distcc-exec.cmd='id'" -oN Netauto/$IP/Protocols/distcc/nmap/cve2004-2687.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/distcc/nmap/cve2004-2687.nmap" "NMAP distcc CVE-2004-2687 vulnerability scan"

	echo " "
}

subversion_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Subversion on port 3690${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/subversion/
	path_check "$(pwd)/Netauto/$IP/Protocols/subversion" "subversion"

	mkdir -p Netauto/$IP/Protocols/subversion/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/subversion/nc" "subversion netcat"

	nc $IP 3690 | tee Netauto/$IP/Protocols/subversion/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/subversion/nc/nc.txt" "subversion netcat connection"

	nc -vn $IP 3690 | tee Netauto/$IP/Protocols/subversion/nc/nc-vn.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/subversion/nc/nc-vn.txt" "subversion verbose netcat connection"

	mkdir -p Netauto/$IP/Protocols/subversion/svn
	path_check "$(pwd)/Netauto/$IP/Protocols/subversion/svn" "svn"

	svn ls svn://$IP | tee Netauto/$IP/Protocols/subversion/svn/ls.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/subversion/svn/ls.txt" "subversion svn list enumeration"

	svn log svn://$IP | tee Netauto/$IP/Protocols/subversion/svn/log.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/subversion/svn/log.txt" "subversion svn commit history enumeration"

	echo " "
}

ws-discovery_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating WS Discovery on port 3702${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/ws-discovery/
	path_check "$(pwd)/Netauto/$IP/Protocols/ws-discovery/" "ws-discovery"

	mkdir -p Netauto/$IP/Protocols/ws-discovery/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ws-discovery/nmap" "NMAP WS-Discovery"

	nmap -sC -p 3702 $IP -on Netauto/$IP/Protocols/ws-discovery/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ws-discovery/nmap/script.nmap" "NMAP WS-Discovery script scan"

	nmap -sV -p 3702 $IP -on Netauto/$IP/Protocols/ws-discovery/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ws-discovery/nmap/version.nmap" "NMAP WS-Discovery version scan"

	nmap -sC -sV -p 3702 $IP -on Netauto/$IP/Protocols/ws-discovery/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ws-discovery/nmap/service-version.nmap" "NMAP WS-Discovery service and version detection scan"

	echo " "
}

epmd_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating EPMD on port 4369${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/epmd/
	path_check "$(pwd)/Netauto/$IP/Protocols/epmd/" "EPMD"

	mkdir -p Netauto/$IP/Protocols/epmd/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/epmd/nc" "EPMD netcat"

	nc $IP 4369 | tee Netauto/$IP/Protocols/epmd/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/epmd/nc/nc.txt" "EPMD netcat connection"

	nc -vn $IP 4369 | tee Netauto/$IP/Protocols/epmd/nc/epmd-vn.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/epmd/nc/nc-vn.txt" "EPMD verbose netcat connection"

	mkdir -p Netauto/$IP/Protocols/epmd/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/epmd/nmap" "NMAP EPMD"

	nmap -p 4369 --script epmd-info $IP -oN Netauto/$IP/Protocols/epmd/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/epmd/nmap/info.nmap" "NMAP EPMD info script scan"

	nmap -sV -Pn -n -T4 -p 4369 --script epmd-info $IP -oN Netauto/$IP/Protocols/epmd/nmap/aggressive-scan.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/epmd/nmap/aggressive-scan.nmap" "NMAP EPMD aggressive info scan"

	echo " "
}

cisco_smart_install_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating CISCO Smart Install${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate CSIS${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/CSIS
	path_check "$(pwd)/Netauto/$IP/Protocols/CSIS" "CSIS"

	mkdir -p Netauto/$IP/Protocols/CSIS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/CSIS/nmap" "NMAP CSIS"

	nmap -sC -p 3702 $IP -on Netauto/$IP/Protocols/CSIS/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ws-discovery/nmap/script.nmap" "NMAP CSIS script scan"

	nmap -sV -p 3702 $IP -on Netauto/$IP/Protocols/CSIS/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ws-discovery/nmap/version.nmap" "NMAP CSIS version scan"

	nmap -sC -sV -p 3702 $IP -on Netauto/$IP/Protocols/CSIS/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ws-discovery/nmap/service-version.nmap" "NMAP CSIS service and version detection scan"

	echo " "
}

opc_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating OPC on port 4840${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/OPC
	path_check "$(pwd)/Netauto/$IP/Protocols/OPC" "OPC"

	mkdir -p Netauto/$IP/nmap/Protocols/OPC/nmap
	path_check "$(pwd)/Netauto/$IP/nmap/Protocols/OPC/nmap" "NMAP OPC"

	nmap -sC -p 4840 $IP -on Netauto/$IP/nmap/Protocols/OPC/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/nmap/Protocols/OPC/nmap/script.nmap" "NMAP OPC script scan"

	nmap -sV -p 4840 $IP -on Netauto/$IP/nmap/Protocols/OPC/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/nmap/Protocols/OPC/nmap/version.nmap" "NMAP OPC version scan"

	nmap -sC -sV -p 4840 $IP -on Netauto/$IP/nmap/Protocols/OPC/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/nmap/Protocols/OPC/nmap/info.nmap" "NMAP OPC service and version detection scan"

	opalopc -vv opc.tcp://$IP:4840 | tee Netauto/$IP/Protocols/OPC/opalopc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/OPC/opalopc.txt" "OPC OpalOPC security misconfiguration enumeration scan"

	echo " "
}

docker_registry_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Docker Registry on port 5000${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/docker_registry/
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/" "Docker Registry"

	mkdir -p Netauto/$IP/Protocols/docker_registry/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/nmap" "NMAP Docker Registry"

	nmap -sC -p 5000 $IP -on Netauto/$IP/Protocols/docker_registry/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/nmap/script.nmap" "NMAP Docker Registry script scan"

	nmap -sV -p 5000 $IP -on Netauto/$IP/Protocols/docker_registry/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/nmap/version.nmap" "NMAP Docker Registry version scan"

	nmap -sC -sV -p 5000 $IP -on Netauto/$IP/Protocols/docker_registry/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/nmap/service-version.nmap" "NMAP Docker Registry service and version detection scan"

	mkdir -p Netauto/$IP/Protocols/docker_registry/curl
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/curl" "curl"

	curl -s http://$IP:5000/v2/_catalog | tee Netauto/$IP/Protocols/docker_registry/curl/http-catalog.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/curl/http-catalog.txt" "Docker Registry curl HTTP catalog request"

	curl -s https://$IP:5000/v2/_catalog | tee Netauto/$IP/Protocols/docker_registry/curl/https-catalog.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/curl/https-catalog.txt" "Docker Registry curl HTTPS catalog request"

	curl -k http://$IP:5000/v2/_catalog | tee Netauto/$IP/Protocols/docker_registry/http-auth.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/http-auth.txt" "Docker Registry curl HTTP authentication request"

	curl -k https://$IP:5000/v2/_catalog | tee Netauto/$IP/Protocols/docker_registry/https-auth.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/https-auth.txt" "Docker Registry curl HTTPS authentication request"

	mkdir -p Netauto/$IP/Protocols/docker_registry/DockerRegistryGrabber
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/DockerRegistryGrabber" "DockerRegistryGrabber"

	python /opt/tools/Docker_Registry/DockerRegistryGrabber/drg.py http://$IP --list | tee Netauto/$IP/Protocols/docker_registry/DockerRegistryGrabber/list.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/DockerRegistryGrabber/list.txt" "Docker Registry list enumeration"

	python /opt/tools/Docker_Registry/DockerRegistryGrabber/drg.py http://$IP --dump linux | tee Netauto/$IP/Protocols/docker_registry/DockerRegistryGrabber/dump.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/DockerRegistryGrabber/dump.txt" "Docker Registry dumping enumeration"

	python /opt/tools/Docker_Registry/DockerRegistryGrabber/drg.py http://$IP --dump_all | tee Netauto/$IP/Protocols/docker_registry/DockerRegistryGrabber/dump_all.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/docker_registry/DockerRegistryGrabber/dump_all.txt" "Docker Registry all dump info enumeration"

	echo " "
}

mdns_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating MDNS on port 5353${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/mDNS/
	path_check "$(pwd)/Netauto/$IP/Protocols/mDNS" "mDNS"

	mkdir -p Netauto/$IP/Protocols/mDNS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/mDNS/nmap" "NMAP mDNS"

	nmap --script dns-service-discovery -p 5353 $IP -oN Netauto/$IP/Protocols/mDNS/nmap/service-discovery.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/mDNS/nmap/service-discovery.nmap" "NMAP mDNS DNS service discovery enumeration script scan"

	nmap -sU --script dns-service-discovery -p 5353 $IP -oN Netauto/$IP/Protocols/mDNS/nmap/udp-service-discovery.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/mDNS/nmap/udp-service-discovery.nmap" "NMAP mDNS DNS service discovery UDP enumeration script scan"

	echo " "
}

redshift_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating RedShift on port 5439${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/redshift/
	path_check "$(pwd)/Netauto/$IP/Protocols/redshift/" "redshift"

	mkdir -p Netauto/$IP/Protocols/redshift/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/redshift/nmap" "NMAP redshift"

	nmap -sC -p 5439 $IP -on Netauto/$IP/Protocols/redshift/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/redshift/nmap/script.nmap" "NMAP redshift script scan"

	nmap -sV -p 5439 $IP -on Netauto/$IP/Protocols/redshift/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/redshift/nmap/version.nmap" "NMAP redshift version scan"

	nmap -sC -sV -p 5439 $IP -on Netauto/$IP/Protocols/redshift/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/redshift/nmap/service-version.nmap" "NMAP redshift service and version detection scan"

	echo " "
}

android_debug_bridge_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Android Debug Bridge on port 5555${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/ADB
	path_check "$(pwd)/Netauto/$IP/Protocols/ADB" "ADB"

	mkdir -p Netauto/$IP/Protocols/ADB/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ADB/nmap" "NMAP ADB"

	nmap -sC -p 5555 $IP -oN Netauto/$IP/Protocols/ADB/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ADB/nmap/script.nmap" "NMAP ADB script scan"

	nmap -sV -p 5555 $IP -oN Netauto/$IP/Protocols/ADB/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ADB/nmap/version.nmap" "NMAP ADB version scan"

	nmap -sC -sV -p 5555 $IP -oN Netauto/$IP/Protocols/ADB/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/ADB/nmap/service-version.nmap" "NMAP ADB service and version detection scan"

	echo " "
}

kibana_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Kibana on port 5601${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Kibana
	path_check "$(pwd)/Netauto/$IP/Protocols/Kibana" "Kibana"

	mkdir -p Netauto/$IP/Protocols/Kibana/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kibana/nmap" "NMAP Kibana"

	nmap -sC -p 5601 $IP -oN Netauto/$IP/Protocols/Kibana/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kibana/nmap/script.nmap" "NMAP Kibana script scan"

	nmap -sV -p 5601 $IP -oN Netauto/$IP/Protocols/Kibana/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kibana/nmap/version.nmap" "NMAP Kibana version scan"

	nmap -sC -sV -p 5601 $IP -oN Netauto/$IP/Protocols/Kibana/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Kibana/nmap/service-version.nmap" "NMAP Kibana service and version detection scan"

	echo " "
}

amqp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating AMQP on port 5672${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/AMQP
	path_check "$(pwd)/Netauto/$IP/Protocols/AMQP" "AMQP"

	mkdir -p Netauto/$IP/Protocols/AMQP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AMQP/nmap" "NMAP AMQP"

	nmap -p 5672 --script amqp-info $IP -oN Netauto/$IP/Protocols/AMQP/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AMQP/nmap/info.nmap" "NMAP AMQP info script scan"

	nmap -sV -Pn -n -T4 -p 5672 --script amqp-info $IP -oN Netauto/$IP/Protocols/AMQP/nmap/aggressive-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AMQP/nmap/aggressive-info.nmap" "NMAP AMQP aggressive info script scan"

	echo " "
}

vnc_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating VNC on port 5900${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate VNC${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/VNC
	path_check "$(pwd)/Netauto/$IP/Protocols/VNC" "VNC"

	mkdir -p Netauto/$IP/Protocols/VNC/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/VNC/nmap" "NMAP VNC"

	nmap -p 5900 --script vnc-title $IP -oN Netauto/$IP/Protocols/VNC/nmap/title.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/VNC/nmap/title.nmap" "NMAP VNC title script enumeration scan"

	nmap -p 5900 --script vnc-info $IP -oN Netauto/$IP/Protocols/VNC/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/VNC/nmap/info.nmap" "NMAP VNC info script enumeration scan"

	nmap --script realvnc-auth-bypass -p 5900 $IP -oN Netauto/$IP/Protocols/VNC/nmap/auth-bypass.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/VNC/nmap/auth-bypass.nmap" "NMAP VNC authentication bypass enumeration scan"

	nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title -p 5900 $IP -oN Netauto/$IP/Protocols/VNC/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/VNC/nmap/script.nmap" "NMAP VNC script scan"

	sudo nmap -Pn -n --open -p5900 --script=realvnc-auth-bypass,vnc-info $IP/24 -oN Netauto/$IP/Protocols/VNC/subnet.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/VNC/subnet.nmap" "NMAP VNC subnet scan"

	nmap -p 5900 --script "vnc-* and not brute" $IP -oN Netauto/$IP/Protocols/VNC/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/VNC/nmap/all.nmap" "full NMAP VNC scan"

	echo " "
}

winrm_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating WinRM on port 5985 & 5986${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/WinRM
	path_check "$(pwd)/Netauto/$IP/Protocols/WinRM" "WinRM"

	mkdir -p Netauto/$IP/Protocols/WinRM/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/WinRM/nmap" "NMAP WinRM"

	nmap -sC -p 5985,5986 $IP -oN Netauto/$IP/Protocols/WinRM/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/WinRM/nmap/script.nmap" "NMAP WinRM script scan"

	nmap -sV -p 5985,5986 $IP -oN Netauto/$IP/Protocols/WinRM/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/WinRM/nmap/version.nmap" "NMAP WinRM version scan"

	nmap -sC -sV -p 5985,5986 $IP -oN Netauto/$IP/Protocols/WinRM/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/WinRM/nmap/service-version.nmap" "NMAP WinRM service and version detection scan"

	echo " "
}

omi_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating OMI on port 5985 & 5986${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/OMI
	path_check "$(pwd)/Netauto/$IP/Protocols/OMI" "OMI"

	mkdir -p Netauto/$IP/Protocols/OMI/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/OMI/nmap" "NMAP OMI"

	nmap -sC -p 5985,5986 $IP -oN Netauto/$IP/Protocols/OMI/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/OMI/nmap/script.nmap" "NMAP OMI script scan"

	nmap -sV -p 5985,5986 $IP -oN Netauto/$IP/Protocols/OMI/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/OMI/nmap/version.nmap" "NMAP OMI version scan"

	nmap -sC -sV -p 5985,5986 $IP -oN Netauto/$IP/Protocols/OMI/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/OMI/nmap/service-version.nmap" "NMAP OMI service and version detection scan"

	echo " "
}

x11_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating X11 on port 6000 & in range up to 6005${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate X11${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/X11
	path_check "$(pwd)/Netauto/$IP/Protocols/X11/" "X11"

	mkdir -p Netauto/$IP/Protocols/X11/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/X11/nmap" "NMAP X11"

	nmap --script x11-access -p 6000 $IP -oN Netauto/$IP/Protocols/X11/nmap/access.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/X11/nmap/access.nmap" "NMAP X11 access authentication scan"

	nmap -sV --script x11-access -p 6000 $IP -oN Netauto/$IP/Protocols/X11/nmap/access-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/X11/nmap/access-version.nmap" "NMAP X11 access authentication version scan"

	sudo nmap -Pn -n --open -p6000-6005 --script=x11-access $IP/24 -oN Netauto/$IP/Protocols/X11/nmap/extended-script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/X11/nmap/ext.nmap" "NMAP X11 access authentication port scan"

	echo " "
}

ajp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating AJP on port 8009${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/AJP/
	path_check "$(pwd)/Netauto/$IP/Protocols/AJP" "AJP"

	mkdir -p Netauto/$IP/Protocols/AJP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AJP/nmap" "NMAP AJP"

	nmap --script ajp-auth -p 8009 $IP -oN Netauto/$IP/Protocols/AJP/nmap/auth.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AJP/nmap/auth.nmap" "NMAP AJP authentication enumeration"

	nmap --script ajp-auth --script-args ajp-auth.path=/login -p 8009 $IP -oN Netauto/$IP/Protocols/AJP/nmap/auth-login.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AJP/nmap/auth-login.nmap" "NMAP AJP login authentication enumeration"

	nmap --script ajp-headers -p 8009 $IP -oN Netauto/$IP/Protocols/AJP/nmap/headers.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AJP/nmap/headers.nmap" "NMAP AJP headers enumeration"

	nmap --script ajp-methods -p 8009 $IP -oN Netauto/$IP/Protocols/AJP/nmap/methods.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AJP/nmap/methods.nmap" "NMAP AJP methods enumeration"

	nmap --script ajp-request -p 8009 $IP -oN Netauto/$IP/Protocols/AJP/nmap/request.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AJP/nmap/request.nmap" "NMAP AJP request enumeration"

	nmap -sV --script ajp-auth,ajp-headers,ajp-methods,ajp-request -n -p 8009 $IP -oN Netauto/$IP/Protocols/AJP/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/AJP/nmap/all.nmap" "full NMAP AJP scan"

	echo " "
}

splunk_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Splunk on port 8089${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Splunk
	path_check "$(pwd)/Netauto/$IP/Protocols/Splunk" "Splunk"

	mkdir -p Netauto/$IP/Protocols/Splunk/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Splunk/nmap" "NMAP Splunk"

	nmap -sC -p 8089 $IP -oN Netauto/$IP/Protocols/Splunk/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Splunk/nmap/script.nmap" "NMAP Splunk script scan"

	nmap -sV -p 8089 $IP -oN Netauto/$IP/Protocols/Splunk/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Splunk/nmap/version.nmap" "NMAP Splunk version scan"

	nmap -sC -sV -p 8089 $IP -oN Netauto/$IP/Protocols/Splunk/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Splunk/nmap/service-version.nmap" "NMAP Splunk service and version detection scan"

	echo " "
}

bitcoin_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Bitcoin on port 8333, 18333, 38333 & 18444${ENDCOLOR}\n"

	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate Bitcoin${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Bitcoin
	path_check "$(pwd)/Netauto/$IP/Protocols/Bitcoin" "Bitcoin"

	mkdir -p Netauto/$IP/Protocols/Bitcoin/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Bitcoin/nmap" "NMAP Bitcoin"

	sudo nmap -p 8333 --script bitcoin-info $IP -oN Netauto/$IP/Protocols/Bitcoin/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Bitcoin/nmap/info.nmap" "NMAP Bitcoin main gateway info enumeration scan"

	sudo nmap -p 8333 --script bitcoin-getaddr $IP -oN Netauto/$IP/Protocols/Bitcoin/nmap/getaddr.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Bitcoin/nmap/getaddr.nmap" "NMAP Bitcoin main gateway address enumeration scan"

	sudo nmap -p 8333 --script bitcoin-info --script bitcoin-getaddr $IP -oN Netauto/$IP/Protocols/Bitcoin/nmap/info-getaddr.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Bitcoin/nmap/info-getaddr.nmap" "NMAP Bitcoin Main Gateway enumeration scan"

	sudo nmap -p 8333,18333,38333,18444 --script bitcoin-info,bitcoin-getaddr $IP -oN Netauto/$IP/Protocols/Bitcoin/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Bitcoin/nmap/script.nmap" "NMAP Bitcoin script scan"

	sudo nmap -sV -p 8333,18333,38333,18444 --script bitcoin-info,bitcoin-getaddr $IP -oN Netauto/$IP/Protocols/Bitcoin/nmap/ext-script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Bitcoin/nmap/ext-script.nmap" "NMAP Bitcoin version script scan"

	echo " "
}

fastcgi_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating FastCGI on port 9000${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/FastCGI
	path_check "$(pwd)/Netauto/$IP/Protocols/FastCGI/" "FastCGI"

	mkdir -p Netauto/$IP/Protocols/FastCGI/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/FastCGI/nmap" "NMAP FastCGI"

	nmap -sC -p 9000 $IP -oN Netauto/$IP/Protocols/FastCGI/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/FastCGI/nmap/script.nmap" "NMAP FastCGI script scan"

	nmap -sV -p 9000 $IP -oN Netauto/$IP/Protocols/FastCGI/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/FastCGI/nmap/version.nmap" "NMAP FastCGI version scan"

	nmap -sC -sV -p 9000 $IP -oN Netauto/$IP/Protocols/FastCGI/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/FastCGI/nmap/service-version.nmap" "NMAP FastCGI service and version detection scan"

	echo " "
}

hsqldb_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating HSQLDB on port 9001${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/HSQLDB
	path_check "$(pwd)/Netauto/$IP/Protocols/HSQLDB" "HSQLDB"

	mkdir -p Netauto/$IP/Protocols/HSQLDB/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HSQLDB/nmap" "NMAP HSQLDB"

	nmap -sC -p 9001 $IP -oN Netauto/$IP/nmap/Protocols/HSQLDB/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/nmap/Protocols/HSQLDB/nmap/script.nmap" "NMAP HSQLDB script scan"

	nmap -sV -p 9001 $IP -oN Netauto/$IP/nmap/Protocols/HSQLDB/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/nmap/Protocols/HSQLDB/nmap/version.nmap" "NMAP HSQLDB version scan"

	nmap -sC -sV -p 9001 $IP -oN Netauto/$IP/nmap/Protocols/HSQLDB/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/nmap/Protocols/HSQLDB/nmap/service-version.nmap" "NMAP HSQLDB service and version detection scan"

	echo " "
}

cassandra_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Cassandra on port 9042 & 9160${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Cassandra
	path_check "$(pwd)/Netauto/$IP/Protocols/Cassandra" "Cassandra"

	mkdir -p Netauto/$IP/Protocols/Cassandra/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Cassandra/nmap" "NMAP Cassandra"

	nmap --script cassandra-info -p 9042,9160 $IP -oN Netauto/$IP/Protocols/Cassandra/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Cassandra/nmap/info.nmap" "NMAP Cassandra info script scan"

	nmap -sV --script cassandra-info -p 9042,9160 $IP -oN Netauto/$IP/Protocols/Cassandra/nmap/info-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Cassandra/nmap/info-version.nmap" "NMAP Cassandra info version script scan"

	echo " "
}

raw_printing_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Raw Printing on port 9100${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/raw_printing
	path_check "$(pwd)/Netauto/$IP/Protocols/raw_printing" "Raw Printing"

	mkdir -p Netauto/$IP/Protocols/raw_printing/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/raw_printing/nmap" "NMAP Raw Printing"

	nmap --script pjl-ready-message -p 9100 $IP -oN Netauto/$IP/Protocols/raw_printing/nmap/pjl-ready-message.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/raw_printing/nmap/pjl-ready-message.nmap" "NMAP Raw Printing Printer Job Language enumeration"

	nmap -sV --script pjl-ready-message -p 9100 $IP -oN Netauto/$IP/Protocols/raw_printing/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/raw_printing/nmap/version.nmap" "NMAP Raw Printing version enumeration scan"

	echo " "
}

elasticsearch_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Elasticsearch on port 9200${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch" "Elasticsearch"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl" "Elasticsearch curl"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/_xpack/security
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/_xpack/security" "Elasticsearch _xpack security"

	curl -X GET "$IP:9200/_xpack/security/user" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_xpack/security/user.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_xpack/security/user.txt" "HTTP Elasticsearch curl _xpack security user request"

	mkdir -p netauto/$ip/protocols/elasticsearch/curl/_security
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch" "Elasticsearch _security"

	curl -X GET "$IP:9200/_security/role" | tee Netauto/$IP/Protocols/Elasticsearch/curl/security/role.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_security/role.txt" "HTTP Elasticsearch curl security role request"

	curl -X GET "$IP:9200/_security/user" | tee Netauto/$IP/Protocols/Elasticsearch/curl/security/user.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_security/user.txt" "HTTP Elasticsearch curl security user request"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_cat
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat" "_cat"

	curl -X GET "$IP:9200/_cat/segments" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/segments.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/segments.txt" "HTTP Elasticsearch curl segments request"

	curl -X GET "$IP:9200/_cat/shards" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/shards.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/shards.txt" "HTTP Elasticsearch curl shards request"

	curl -X GET "$IP:9200/_cat/repositories" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/repositories.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/repositories.txt" "HTTP Elasticsearch curl repositories request"

	curl -X GET "$IP:9200/_cat/recovery" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/recovery.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/recovery.txt" "HTTP Elasticsearch curl recovery request"

	curl -X GET "$IP:9200/_cat/plugins" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/plugins.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/plugins.txt" "HTTP Elasticsearch curl plugins request"

	curl -X GET "$IP:9200/_cat/pending_tasks" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/pending_tasks.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/pending_tasks.txt" "HTTP Elasticsearch curl pending tasks request"

	curl -X GET "$IP:9200/_cat/nodes" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/nodes.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/nodes.txt" "HTTP Elasticsearch curl nodes request"

	curl -X GET "$IP:9200/_cat/tasks" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/tasks.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/tasks.txt" "HTTP Elasticsearch curl tasks request"

	curl -X GET "$IP:9200/_cat/templates" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/templates.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/templates.txt" "HTTP Elasticsearch curl templates request"

	curl -X GET "$IP:9200/_cat/thread_pool" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/thread_pool.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/thread_pool.txt" "HTTP Elasticsearch curl thread pool request"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml" "ml"

	curl -X GET "$IP:9200/_cat/ml/trained_models" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/trained_models.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/trained_models.txt" "HTTP Elasticsearch curl ml trained models request"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_cat/transforms
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/transforms" "transforms"

	curl -X GET "$IP:9200/_cat/transforms/_all" | tee Netauto/$IP/Protocols/Elasticsearch/curl/curl/_cat/transforms/_all.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/curl/_cat/transforms/_all.txt" "HTTP Elasticsearch curl all transforms request"

	curl -X GET "$IP:9200/_cat/aliases" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/aliases.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/aliases.txt" "HTTP Elasticsearch curl aliases request"

	curl -X GET "$IP:9200/_cat/allocation" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/allocation.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/allocation.txt" "HTTP Elasticsearch curl allocation request"

	curl -X GET "$IP:9200/_cat/ml/anomaly_detectors" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/anomaly_detectors.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/anomaly_detectors.txt" "HTTP Elasticsearch curl ml anomaly detectors request"

	curl -X GET "$IP:9200/_cat/count" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/count.txt
	path_check "curl -X GET "$IP:9200/_cat/count" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/count.txt" "HTTP Elasticsearch curl count request"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/data_frame
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/data_frame" "data_frame"

	curl -X GET "$IP:9200/_cat/ml/data_frame/analytics" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/data_frame/analytics.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/data_frame/analytics.txt" "HTTP Elasticsearch curl analytics request"

	curl -X GET "$IP:9200/_cat/ml/datafeeds" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/datafeeds.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/ml/datafeeds.txt" "HTTP Elasticsearch curl datafeeds request"

	curl -X GET "$IP:9200/_cat/fielddata" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/fielddata.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/fielddata.txt" "HTTP Elasticsearch curl fielddata request"

	curl -X GET "$IP:9200/_cat/health" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/health.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/health.txt" "HTTP Elasticsearch curl health request"

	curl -X GET "$IP:9200/_cat/indices" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/indices.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/indices.txt" "HTTP Elasticsearch curl indices request"

	curl -X GET "$IP:9200/_cat/master" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/master.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/master.txt" "HTTP Elasticsearch curl master request"

	curl -X GET "$IP:9200/_cat/nodeattrs" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/nodeattrs.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/nodeattrs.txt" "HTTP Elasticsearch curl nodeattrs request"

	curl -X GET "$IP:9200/_cat/nodes" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cat/nodes.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cat/nodes.txt" "HTTP Elasticsearch curl nodes request"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_cluster
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cluster" "_cluster"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/allocation
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/allocation" "allocation"

	curl -X GET "$IP:9200/_cluster/allocation/explain" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/allocation/explain.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/allocation/explain.txt" "HTTP Elasticsearch curl explain request"

	curl -X GET "$IP:9200/_cluster/settings" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/settings.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/settings.txt" "HTTP Elasticsearch curl settings request"

	curl -X GET "$IP:9200/_cluster/health" | tee Netauto/$IP/Protocols/Elasticsearch/curl/curl-_cluster-health.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/health.txt" "HTTP Elasticsearch curl health request"

	curl -X GET "$IP:9200/_cluster/state" | tee Netauto/$IP/Protocols/Elasticsearch/curl/curl-_cluster-state.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/state.txt" "HTTP Elasticsearch curl state request"

	curl -X GET "$IP:9200/_cluster/stats" | tee Netauto/$IP/Protocols/Elasticsearch/curl/curl-_cluster-stats.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/stats.txt" "HTTP Elasticsearch curl stats request"

	curl -X GET "$IP:9200/_cluster/pending_tasks" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/pending_tasks.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_cluster/pending_tasks.txt" "HTTP Elasticsearch curl pending_tasks request"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_nodes
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_nodes" "_nodes"

	curl -X GET "$IP:9200/_nodes" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_nodes.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_nodes.txt" "HTTP Elasticsearch curl _nodes request"

	curl -X GET "$IP:9200/_nodes/usage" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_nodes/usage.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_nodes/usage.txt" "HTTP Elasticsearch curl usage request"

	curl -X GET "$IP:9200/_nodes/hot_threads" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_nodes/hot_threads.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_nodes/hot_threads.txt" "HTTP Elasticsearch curl hot_threads request"

	curl -X GET "$IP:9200/_nodes/stats" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_nodes/stats.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_nodes/stats.txt" "HTTP Elasticsearch curl stats request"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_tasks
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_tasks" "_tasks"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_tasks/allocation
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_tasks/allocation" "allocation"

	curl -X GET "$IP:9200/_tasks/allocation/explain" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_tasks/allocation/explain.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_tasks/allocation/explain.txt" "HTTP Elasticsearch curl explain request"

	mkdir -p Netauto/$IP/Protocols/Elasticsearch/curl/_remote
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_remote" "_remote"

	curl -X GET "$IP:9200/_remote/info" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_remote/info.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_remote/info.txt" "HTTP Elasticsearch curl info request"

	curl -X GET "$IP:9200/_security/user" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_security/user-ext.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_security/user-ext.txt" "HTTP Elasticsearch curl user extended request"

	curl -X GET "$IP:9200/_security/privilege" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_security/privilege.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_security/privilege.txt" "HTTP Elasticsearch curl privilege request"

	curl -X GET "$IP:9200/_security/role_mapping" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_security/role_mapping.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_security/role_mapping.txt" "HTTP Elasticsearch curl role_mapping request"

	curl -X GET "$IP:9200/_security/role" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_security/role-ext.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_security/role-ext.txt" "HTTP Elasticsearch curl extended role request"

	curl -X GET "$IP:9200/_security/api_key" | tee Netauto/$IP/Protocols/Elasticsearch/curl/_security/api_key.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Elasticsearch/curl/_security/api_key.txt" "HTTP Elasticsearch curl api_key request"

	echo " "
}

ndmp_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating NDMP on port 10000${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/NDMP
	path_check "$(pwd)/Netauto/$IP/Protocols/NDMP" "NDMP"

	mkdir -p Netauto/$IP/Protocols/NDMP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NDMP/nmap" "NMAP NDMP"

	nmap --script ndmp-version -p 10000 $IP -oN Netauto/$IP/Protocols/NDMP/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NDMP/nmap/version.nmap" "NMAP NDMP script version scan"

	nmap --script ndmp-fs-info -p 10000 $IP -oN Netauto/$IP/Protocols/NDMP/nmap/fs-info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NDMP/nmap/fs-info.nmap" "NMAP NDMP info scan"

	nmap -n -sV --script "ndmp-fs-info or ndmp-version" -p 10000 $IP -oN Netauto/$IP/Protocols/NDMP/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/NDMP/nmap/all.nmap" "full NMAP NDMP scan"

	echo " "
}

memcached_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Memcached on port 11211${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Memcached
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached" "Memcached"

	mkdir -p Netauto/$IP/Protocols/Memcached/nc
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/nc" "Memcached netcat"

	nc $IP 11211 | tee Netauto/$IP/Protocols/Memcached/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/nc/nc.txt" "Memcached netcat connection"

	nc -vn $IP 11211 | tee Netauto/$IP/Protocols/Memcached/nc/nc-vn.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/nc/nc-vn.txt" "Memcached verbose netcat connection"

	nc -vn -w 1 $IP 11211 | tee Netauto/$IP/Protocols/Memcached/nc/memcached-w.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/nc/w.txt" "Memcached timeout verbose netcat connection"

	mkdir -p Netauto/$IP/Protocols/Memcached/memcstat
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/memcstat" "memcstat"

	memcstat --servers=$IP | tee Netauto/$IP/Protocols/Memcached/memcstat/stats.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/memcstat/stats.txt" "Memcached Memcstat stats enumeration"

	mkdir -p Netauto/$IP/Protocols/Memcached/memcdump
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/memcdump" "memcdump"

	memcdump --servers=$IP | tee Netauto/$IP/Protocols/Memcached/memcdump/items.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/memcdump/items.txt" "Memcached Memcdump items enumeration"

	mkdir -p Netauto/$IP/Protocols/Memcached/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/nmap" "NMAP Memcached"
	
	nmap -n -sV --script memcached-info -p 11211 $IP | tee Netauto/$IP/Protocols/Memcached/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Memcached/nmap/info.nmap" "NMAP Memcached script info scan"

	echo " "
}

rabbitmq_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating RabbitMQ on port 15672${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/RabbitMQ
	path_check "$(pwd)/Netauto/$IP/Protocols/RabbitMQ" "RabbitMQ"

	mkdir -p Netauto/$IP/Protocols/RabbitMQ/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RabbitMQ/nmap" "NMAP RabbitMQ"

	nmap -sC -p 15672 $IP -oN Netauto/$IP/Protocols/RabbitMQ/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RabbitMQ/nmap/script.nmap" "NMAP RabbitMQ script scan"

	nmap -sV -p 15672 $IP -oN Netauto/$IP/Protocols/RabbitMQ/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RabbitMQ/nmap/version.nmap" "NMAP RabbitMQ version scan"

	nmap -sC -sV -p 15672 $IP -oN Netauto/$IP/Protocols/RabbitMQ/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/RabbitMQ/nmap/service-version.nmap" "NMAP RabbitMQ service and version detection scan"

	echo " "
}

glusterfs_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating GlusterFS on port 24007 & 49152${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate GlusterFS${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/GlusterFS
	path_check "$(pwd)/Netauto/$IP/Protocols/GlusterFS" "GlusterFS"

	mkdir -p Netauto/$IP/Protocols/GlusterFS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/GlusterFS/nmap" "NMAP GlusterFS"

	nmap -sC -p 24007,49152 $IP -oN Netauto/$IP/Protocols/GlusterFS/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/GlusterFS/nmap/script.nmap" "NMAP GlusterFS script scan"

	nmap -sV -p 24007,49152 $IP -oN Netauto/$IP/Protocols/GlusterFS/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/GlusterFS/nmap/version.nmap" "NMAP GlusterFS version scan"

	nmap -sC -sV -p 24007,49152 $IP -oN Netauto/$IP/Protocols/GlusterFS/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/GlusterFS/nmap/service-version.nmap" "NMAP GlusterFS service and version detection scan"

	mkdir -p Netauto/$IP/Protocols/GlusterFS/gluster
	path_check "$(pwd)/Netauto/$IP/Protocols/GlusterFS/gluster" "gluster"

	sudo gluster --remote-host=$IP volume list | tee Netauto/$IP/Protocols/GlusterFS/gluster/volumes.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/GlusterFS/gluster/volumes.txt" "GlusterFS volume list enumeration"

	echo " "
}

tiller_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Tiller on port 44134${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to enumerate Tiller${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Tiller
	path_check "$(pwd)/Netauto/$IP/Protocols/Tiller" "Tiller"

	mkdir -p Netauto/$IP/Protocols/Tiller/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Tiller/nmap" "NMAP Tiller"

	nmap -sC -p 44134 $IP -oN Netauto/$IP/Protocols/Tiller/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Tiller/nmap/script.nmap" "NMAP Tiller script scan"

	nmap -sV -p 44134 $IP -oN Netauto/$IP/Protocols/Tiller/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Tiller/nmap/version.nmap" "NMAP Tiller version scan"

	nmap -sC -sV -p 44134 $IP -oN Netauto/$IP/Protocols/Tiller/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Tiller/nmap/service-version.nmap" "NMAP Tiller service and version detection scan"

	sudo nmap -sS -p 44134 $IP -oN Netauto/$IP/Protocols/Tiller/nmap/stealth-scan.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Tiller/nmap/stealth-scan.nmap" "NMAP Tiller stealth scan"

	echo " "
}

ethernetip_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating EthernetIP on port 44818${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/EthernetIP
	path_check "$(pwd)/Netauto/$IP/Protocols/EthernetIP" "EthernetIP"

	mkdir -p Netauto/$IP/Protocols/EthernetIP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EthernetIP/nmap" "NMAP EthernetIP"

	nmap -sC -p 44818 $IP -oN Netauto/$IP/Protocols/EthernetIP/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EthernetIP/nmap/script.nmap" "NMAP EthernetIP script scan"

	nmap -sV -p 44818 $IP -oN Netauto/$IP/Protocols/EthernetIP/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EthernetIP/nmap/version.nmap" "NMAP EthernetIP version scan"

	nmap -sC -sV -p 44818 $IP -oN Netauto/$IP/Protocols/EthernetIP/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EthernetIP/nmap/service-version.nmap" "NMAP EthernetIP service and version detection scan"

	nmap --script enip-info -p 44818 $IP -oN Netauto/$IP/Protocols/EthernetIP/nmap/info-script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EthernetIP/nmap/info-script.nmap" "NMAP EthernetIP script info scan"

	nmap -n -sV --script enip-info -p 44818 $IP -oN Netauto/$IP/Protocols/EthernetIP/nmap/info-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/EthernetIP/nmap/info-version.nmap" "NMAP EthernetIP script info version scan"

	echo " "
}

bacnet_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating BACNet on port 47808${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/BACNet
	path_check "$(pwd)/Netauto/$IP/Protocols/BACNet" "BACNet"

	mkdir -p Netauto/$IP/Protocols/BACNet/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/BACNet/nmap" "NMAP BACNet"

	nmap -sC -p 47808 $IP -oN Netauto/$IP/Protocols/BACNet/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/BACNet/nmap/script.nmap" "NMAP BACNet script scan"

	nmap -sV -p 47808 $IP -oN Netauto/$IP/Protocols/BACNet/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/BACNet/nmap/version.nmap" "NMAP BACNet version scan"

	nmap -sC -sV -p 47808 $IP -oN Netauto/$IP/Protocols/BACNet/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/BACNet/nmap/service-version.nmap" "NMAP BACNet service and version detection scan"

	nmap --script bacnet-info --script-args full=yes -sU -n -sV -p 47808 $IP -oN Netauto/$IP/Protocols/BACNet/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/BACNet/nmap/info.nmap" "NMAP BACNet script info scan"

	echo " "
}

hadoop_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Hadoop on port 50030, 50060, 50070 & 50090${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/Hadoop
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop" "Hadoop"

	mkdir -p Netauto/$IP/Protocols/Hadoop/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop/nmap" "NMAP Hadoop"

	nmap --script hadoop-jobtracker-info -p 50030 $IP -oN Netauto/$IP/Protocols/Hadoop/nmap/jobtracker.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop/nmap/jobtracker.nmap" "NMAP Hadoop jobtracker info script scan"

	nmap --script hadoop-tasktracker-info -p 50060 $IP -oN Netauto/$IP/Protocols/Hadoop/nmap/tasktracker.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop/nmap/tasktracker.nmap" "NMAP Hadoop tasktracker info script scan"

	nmap --script hadoop-namenode-info -p 50070 $IP -oN Netauto/$IP/Protocols/Hadoop/nmap/namenode.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop/nmap/namenode.nmap" "NMAP Hadoop namenode info script scan"

	nmap --script hadoop-datanode-info -p 50075 $IP -oN Netauto/$IP/Protocols/Hadoop/nmap/datanode.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop/nmap/datanode.nmap" "NMAP Hadoop datanode info script scan"

	nmap --script hadoop-secondary-namenode-info -p 50090 $IP -oN Netauto/$IP/Protocols/Hadoop/nmap/secondary-namenode.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop/nmap/secondary-namenode.nmap" "NMAP Hadoop secondary namenode info script scan"

	nmap --script "hadoop-* and not brute" -p 50030,50060,50070,50075,50090 -oN Netauto/$IP/Protocols/Hadoop/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop/nmap/all.nmap" "full NMAP Hadoop scan"

	nmap -sV --script "hadoop-* and not brute" -p 50030,50060,50070,50075,50090 -oN Netauto/$IP/Protocols/Hadoop/nmap/all-version.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/Hadoop/nmap/all-version.nmap" "full NMAP Hadoop version scan"

	echo " "
}

http_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating HTTP on port 80${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/HTTP
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP" "HTTP"

	mkdir -p Netauto/$IP/Protocols/HTTP/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap" "NMAP HTTP"

	nmap --script http-auth --script-args http-auth.path=/login -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/auth-login.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/auth-login.nmap" "NMAP HTTP login authentication enumeration"

	nmap --script http-devframework -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/devframework.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/devframework.nmap" "NMAP HTTP development framework enumeration"

	nmap --script http-enum -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/enum.nmap" "NMAP HTTP enumeration scan"

	nmap --script http-headers -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/headers.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/headers.nmap" "NMAP HTTP headers enumeration"

	nmap --script http-methods -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/methods.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/methods.nmap" "NMAP HTTP methods enumeration"

	nmap --script http-waf-detect -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/firewall.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/firewall.nmap" "NMAP HTTP firewall scan"

	nmap --script http-wordpress-enum --script-args type="plugins",search-limit=1500 -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/wp-enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/wp-enum.nmap" "NMAP HTTP wordpress enumeration"

	nmap --script http-wordpress-users -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/wp-users.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/wp-users.nmap" "NMAP HTTP wordpress users enumeration scan"

	nmap --script "http-wordpress-* and not brute" -p 80 $IP -oN Netauto/$IP/Protocols/HTTP/nmap/wp-all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/nmap/wp-all.nmap" "full NMAP HTTP wordpress scan"

	mkdir -p Netauto/$IP/Protocols/HTTP/automatic_scanners
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners" "automatic scanners"

	mkdir -p Netauto/$IP/Protocols/HTTP/automatic_scanners/nikto
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/nikto" "nikto"

	nikto -h http://$IP | tee Netauto/$IP/Protocols/HTTP/automatic_scanners/nikto/nikto.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/nikto/nikto.txt" "HTTP niko automatic scan"

	mkdir -p Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb" "whatweb"

	whatweb http://$IP | tee Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb/default.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb/default.txt" "HTTP default whatweb scan"

	whatweb -a 1 http://$IP | tee Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb/stealthy.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb/stealthy.txt" "HTTP stealthy whatweb scan"

	whatweb -a 3 http://$IP | tee Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb/aggressive.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb/aggressive.txt" "HTTP aggressive whatweb scan"

	whatweb -a 4 http://$IP | tee Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb/extreme.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/whatweb/extreme.txt" "HTTP extreme whatweb scan"

	mkdir -p Netauto/$IP/Protocols/HTTP/automatic_scanners/webtech
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/webtech" "webtech"

	webtech -u $IP | tee Netauto/$IP/Protocols/HTTP/automatic_scanners/webtech/webtech.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/webtech/webtech.txt" "HTTP webtech scan"

	mkdir -p Netauto/$IP/Protocols/HTTP/automatic_scanners/webanalyze
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/webanalyze" "webanalyze"

	webanalyze -host $IP -crawl 2 | tee Netauto/$IP/Protocols/HTTP/automatic_scanners/webanalyze/webanalyze.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/webanalyze/webanalyze.txt" "HTTP webanalyze scan"

	mkdir -p Netauto/$IP/Protocols/HTTP/automatic_scanners/wapiti
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/wapiti" "wapiti"

	wapiti -u http://$IP -o Netauto/$IP/Protocols/HTTP/automatic_scanners/wapiti/wapiti.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/automatic_scanners/wapiti/wapiti.txt" "HTTP wapiti scan"

	mkdir -p Netauto/$IP/Protocols/HTTP/Firewall
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/Firewall" "Firewall"

	wafw00f http://$IP | tee Netauto/$IP/Protocols/HTTP/Firewall/wafw00f.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/Firewall/wafw00f.txt" "HTTP Firewall wafw00f scan"

	python3 /opt/tools/HTTP/WhatWaf/whatwaf --url http://$IP | tee Netauto/$IP/Protocols/HTTP/Firewall/whatwaf.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/Firewall/http-whatwaf.txt" "HTTP Firewall WhatWaf scan"

	mkdir -p Netauto/$IP/Protocols/HTTP/CMSScan
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/CMSScan" "CMSScan"

	cmsmap -F -d http://$IP | tee Netauto/$IP/Protocols/HTTP/CMSScan/cms.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/CMSScan/cms.txt" "HTTP CMSMap CMS enumeration scan"

	wpscan --force update -e --url $IP | tee Netauto/$IP/Protocols/HTTP/CMSScan/wpscan.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/CMSScan/wpscan.txt" "HTTP WPScan CMS enumeration scan"

	joomscan --ec -u $IP | tee Netauto/$IP/Protocols/HTTP/CMSScan/joomscan.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/CMSScan/joomscan.txt" "HTTP Joomscan CMS enumeration scan"

	python3 /opt/tools/HTTP/CMSeeK/cmseek.py -u http://$IP | tee Netauto/$IP/Protocols/HTTP/CMSScan/cmseek.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/CMSScan/cmseek.txt" "HTTP CMSeeK CMS enumeration scan"

	echo " "
}

https_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating HTTPS on port 443 & 1443${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Protocols/HTTPS
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS" "HTTPS"

	mkdir -p Netauto/$IP/Protocols/HTTPS/nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap" "NMAP HTTPS"

	nmap --script http-auth --script-args http-auth.path=/login -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/auth-login.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/auth-login.nmap" "NMAP HTTPS login authentication enumeration"

	nmap --script http-devframework -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/devframework.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/devframework.nmap" "NMAP HTTPS development framework enumeration"

	nmap --script http-enum -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/enum.nmap" "NMAP HTTPS enumeration scan"

	nmap --script http-headers -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/headers.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/headers.nmap" "NMAP HTTPS headers enumeration"

	nmap --script http-methods -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/methods.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/methods.nmap" "NMAP HTTPS methods enumeration"

	nmap --script http-waf-detect -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/waf-detect.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/firewall.nmap" "NMAP HTTPS firewall scan"

	nmap --script http-wordpress-enum --script-args type="plugins",search-limit=1500 -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/wordpress-enum.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/wp-enum.nmap" "NMAP HTTPS wordpress enumeration"

	nmap --script http-wordpress-users -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/wordpress-users.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/wp-users.nmap" "NMAP HTTPS wordpress users enumeration scan"

	nmap --script "http-wordpress-* and not brute" -p 443,1443 $IP -oN Netauto/$IP/Protocols/HTTPS/nmap/wordpress-all.nmap
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/nmap/wp-all.nmap" "full NMAP HTTPS wordpress scan"

	mkdir -p Netauto/$IP/Protocols/HTTPS/automatic_scanners
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners" "automatic scanners"

	mkdir -p Netauto/$IP/Protocols/HTTPS/automatic_scanners/nikto
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/nikto" "nikto"

	nikto -h https://$IP | tee Netauto/$IP/Protocols/HTTPS/automatic_scanners/nikto/nikto.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/nikto/nikto.txt" "HTTPS nikto automatic scan"

	mkdir -p Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb" "whatweb"

	whatweb https://$IP | tee Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb/default.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb/default.txt" "HTTPS default whatweb scan"

	whatweb -a 1 https://$IP | tee Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb/stealthy.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb/stealthy.txt" "HTTPS stealthy whatweb scan"

	whatweb -a 3 https://$IP | tee Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb/aggressive.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb/aggressive.txt" "HTTPS aggressive whatweb scan"

	whatweb -a 4 https://$IP | tee Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb/extreme.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/whatweb/extreme.txt" "HTTPS extreme whatweb scan"

	mkdir -p Netauto/$IP/Protocols/HTTPS/automatic_scanners/webtech
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/webtech" "webtech"

	webtech -u $IP | tee Netauto/$IP/Protocols/HTTPS/automatic_scanners/webtech/webtech.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/webtech/webtech.txt" "HTTPS webtech scan"

	mkdir -p Netauto/$IP/Protocols/HTTPS/automatic_scanners/webanalyze
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/webanalyze" "webanalyze"

	webanalyze -host $IP -crawl 2 | tee Netauto/$IP/Protocols/HTTPS/automatic_scanners/webanalyze/webanalyze.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/webanalyze/webanalyze.txt" "HTTPS webanalyze scan"

	mkdir -p Netauto/$IP/Protocols/HTTPS/automatic_scanners/wapiti
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/wapiti" "wapiti"

	wapiti -u https://$IP -o Netauto/$IP/Protocols/HTTPS/automatic_scanners/wapiti/wapiti.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/automatic_scanners/wapiti/wapiti.txt" "HTTPS wapiti scan"

	mkdir -p Netauto/$IP/Protocols/HTTPS/Firewall
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/Firewall" "Firewall"

	wafw00f https://$IP | tee Netauto/$IP/Protocols/HTTPS/Firewall/wafw00f.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/Firewall/wafw00f.txt" "HTTPS Firewall wafw00f scan"

	python3 /opt/tools/HTTPS/WhatWaf/whatwaf --url https://$IP | tee Netauto/$IP/Protocols/HTTP/Firewall/whatwaf.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/Firewall/http-whatwaf.txt" "HTTPS Firewall WhatWaf scan"

	mkdir -p Netauto/$IP/Protocols/HTTPS/CMSScan
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/CMSScan" "CMSScan"

	cmsmap -F -d https://$IP | tee Netauto/$IP/Protocols/HTTPS/CMSScan/cms.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/CMSScan/cms.txt" "HTTPS CMSMap CMS enumeration scan"

	wpscan --force update -e --url $IP | tee Netauto/$IP/Protocols/HTTPS/CMSScan/wpscan.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/CMSScan/wpscan.txt" "HTTPS WPScan CMS enumeration scan"

	joomscan --ec -u $IP | tee Netauto/$IP/Protocols/HTTPS/CMSScan/joomscan.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTPS/CMSScan/joomscan.txt" "HTTPS Joomscan CMS enumeration scan"

	python3 /opt/tools/HTTP/CMSeeK/cmseek.py -u https://$IP | tee Netauto/$IP/Protocols/HTTP/CMSScan/cmseek.txt
	path_check "$(pwd)/Netauto/$IP/Protocols/HTTP/CMSScan/cmseek.txt" "HTTPS CMSeeK CMS enumeration scan"
}

###############################################################
# Database Scans                           		      #
###############################################################
mysql_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating MySQL on port 3306${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Databases/MySQL
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL" "MySQL"

	mkdir -p Netauto/$IP/Databases/MySQL/nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap" "NMAP MySQL"

	nmap --script mysql-info -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/info.nmap" "NMAP MySQL info script scan"

	nmap --script mysql-audit -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/audit.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/audit.nmap" "NMAP MySQL audit script scan"

	nmap --script mysql-query -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/query.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/query.nmap" "NMAP MySQL query script scan"

	nmap --script mysql-enum -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/enum.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/enum.nmap" "NMAP MySQL enumeration script scan"

	nmap --script mysql-dump-hashes -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/dump_hashes.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/dump_hashes.nmap" "NMAP MySQL dumping hashes"

	nmap --script mysql-empty-password -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/empty_password.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/empty_password.nmap" "NMAP MySQL empty password enumeration scan"

	nmap --script mysql-variables -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/variables.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/variables.nmap" "NMAP MySQL variables enumeration scan"

	nmap --script mysql-vuln-cve2012-2122 -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/vuln.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/vuln.nmap" "NMAP MySQL CVE-2012-2122 vulnerability scan"

	nmap --script mysql-databases -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/databases.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/databases.nmap" "NMAP MySQL databases enumeration script scan"

	nmap --script mysql-users -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/users.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/users.nmap" "NMAP MySQL users enumeration script scan"

	nmap --script "mysql-* and not brute" -p 3306 $IP -oN Netauto/$IP/Databases/MySQL/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/all.nmap" "full NMAP MySQL scan"

	nmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 $IP -oN Netauto/$IP/Databases/MySQL/nmap/all-version.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MySQL/nmap/all-version.nmap" "full NMAP MySQL version scan"
	
	echo " "
}

couchdb_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating CouchDB on port 5984 & 6384${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Databases/CouchDB
	path_check "$(pwd)/Netauto/$IP/Databases/CouchDB" "CouchDB"
	
	mkdir -p Netauto/$IP/Databases/CouchDB/nmap
	path_check "$(pwd)/Netauto/$IP/Databases/CouchDB/nmap" "NMAP CouchDB"

	nmap --script couchdb-databases -p 5984,6384 $IP -oN Netauto/$IP/Databases/CouchDB/nmap/databases.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/CouchDB/nmap/databases.nmap" "NMAP CouchDB databases enumeration script scan"

	nmap --script couchdb-stats -p 5984,6384 $IP -oN Netauto/$IP/Databases/CouchDB/nmap/stats.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/CouchDB/nmap/stats.nmap" "NMAP CouchDB stats enumeration script scan"

	echo " "
}

influxdb_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating InfluxDB on port 8086${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Databases/InfluxDB
	path_check "$(pwd)/Netauto/$IP/Databases/InfluxDB" "InfluxDB"

	curl http://$IP:8086/debug/requests | tee Netauto/$IP/Databases/InfluxDB/users.txt
	path_check "$(pwd)/Netauto/$IP/Databases/InfluxDB/users.txt" "HTTP InfluxDB curl debug users requests"

	echo " "
}

mongodb_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating MongoDB on port 27017${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Databases/MongoDB
	path_check "$(pwd)/Netauto/$IP/Databases/MongoDB" "MongoDB"

	mkdir -p Netauto/$IP/Databases/MongoDB/nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MongoDB/nmap" "NMAP MongoDB"

	nmap --script mongodb-info -p 27017 $IP -oN Netauto/$IP/Databases/MongoDB/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MongoDB/nmap/info.nmap" "NMAP MongoDB info script scan"

	nmap --script mongodb-databases -p 27017 $IP -oN Netauto/$IP/Databases/MongoDB/nmap/databases.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MongoDB/nmap/databases.nmap" "NMAP MongoDB databases enumeration script scan"

	nmap --script "mongodb-* and not brute" -p 27017 $IP -oN Netauto/$IP/Databases/MongoDB/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MongoDB/nmap/all.nmap" "full NMAP MongoDB scan"

	echo " "
}

mssql_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating MSSQL on port 1433${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Databases/MSSQL
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL" "MSSQL"

	mkdir -p Netauto/$IP/Databases/MSSQL/nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap" "NMAP MSSQL"

	nmap --script broadcast-ms-sql-discover -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/broadcast-ms-sql-discover.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/broadcast-ms-sql-discover.nmap" "NMAP MSSQL broadcast mssql discovery scan"

	nmap --script ms-sql-info -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/info.nmap" "NMAP MSSQL info script scan"

	nmap --script ms-sql-config -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/config.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/config.nmap" "NMAP MSSQL config enumeration script scan"

	nmap --script ms-sql-dac -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/dac.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/dac.nmap" "NMAP MSSQL DAC port enumeration scan"

	nmap --script ms-sql-dump-hashes -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/dump-hashes.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/dump-hashes.nmap" "NMAP MSSQL dumping hashes"

	nmap --script ms-sql-empty-password -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/empty-pwd.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/empty-pwd.nmap" "NMAP MSSQL empty password enumeration script scan"

	nmap --script ms-sql-hasdbaccess -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/hasdbaccess.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/hasdbaccess.nmap" "NMAP MSSQL databases authentication enumeration script scan"

	nmap --script ms-sql-ntlm-info -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/ntlm-info.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/ntlm-info.nmap" "NMAP MSSQL NTLM info script scan"

	nmap --script ms-sql-query -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/query.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/query.nmap" "NMAP MSSQL query enumeration script scan"

	nmap --script ms-sql-tables -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/tables.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/tables.nmap" "NMAP MSSQL tables enumeration script scan"

	nmap --script ms-sql-empty-password,ms-sql-xp-cmdshell -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/cmdshell.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/cmdshell.nmap" "NMAP MSSQL command execution scan"

	nmap --script "ms-sql-* and not brute" -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/all.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/all.nmap" "full NMAP MSSQL scan"

	nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 $IP -oN Netauto/$IP/Databases/MSSQL/nmap/all-version.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/MSSQL/nmap/all-version.nmap" "full NMAP MSSQL version scan"
	
	echo " "
}

postgresql_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating PostgreSQL on port 5432${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Databases/PostgreSQL
	path_check "$(pwd)/Netauto/$IP/Databases/PostgreSQL" "PostgreSQL"

	mkdir -p Netauto/$IP/Databases/PostgreSQL/nmap
	path_check "$(pwd)/Netauto/$IP/Databases/PostgreSQL/nmap" "NMAP PostgreSQL"

	nmap -sC -p 5432 $IP -oN Netauto/$IP/Databases/PostgreSQL/nmap/script.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/PostgreSQL/nmap/script.nmap" "NMAP PostgreSQL script scan"

	nmap -sV -p 5432 $IP -oN Netauto/$IP/Databases/PostgreSQL/nmap/version.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/PostgreSQL/nmap/version.nmap" "NMAP PostgreSQL version scan"

	nmap -sC -sV -p 5432 $IP -oN Netauto/$IP/Databases/PostgreSQL/nmap/service-version.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/PostgreSQL/nmap/service-version.nmap" "NMAP PostgreSQL service and version detection scan"

	echo " "
}

redis_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating Redis on port 6379${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Databases/Redis
	path_check "$(pwd)/Netauto/$IP/Databases/Redis" "Redis"

	mkdir -p Netauto/$IP/Databases/Redis/nc
	path_check "$(pwd)/Netauto/$IP/Databases/Redis/nc" "Redis netcat"

	nc $IP 6379 | tee Netauto/$IP/Databases/Redis/nc/nc.txt
	path_check "$(pwd)/Netauto/$IP/Databases/Redis/nc/nc.txt" "Redis netcat connection"

	nc -nv $IP 6379 | tee Netauto/$IP/Databases/Redis/nc/nc-nv.txt
	path_check "$(pwd)/Netauto/$IP/Databases/Redis/nc/nc-nv.txt" "Redis verbose netcat connection"

	mkdir -p Netauto/$IP/Databases/Redis/nmap
	path_check "$(pwd)/Netauto/$IP/Databases/Redis/nmap" "NMAP Redis"

	nmap --script redis-info -p 6379 $IP -oN Netauto/$IP/Databases/Redis/nmap/info.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/Redis/nmap/info.nmap" "NMAP Redis info script scan"

	nmap --script redis-info -sV -p 6379 $IP -oN Netauto/$IP/Databases/Redis/nmap/info-version.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/Redis/nmap/info-ext.nmap" "NMAP Redis info version script scan"

	mkdir -p Netauto/$IP/Databases/Redis/redis-cli
	path_check "$(pwd)/Netauto/$IP/Databases/Redis/redis-cli" "redis-cli"

	redis-cli -h $IP | tee Netauto/$IP/Databases/Redis/redis-cli/redis-cli.txt
	path_check "$(pwd)/Netauto/$IP/Databases/Redis/redis-cli/redis-cli.txt" "redis-cli connection"

	echo " "
}

oracledb_scan() {
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Enumerating OracleDB on port 1521${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/Databases/OracleDB
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB" "OracleDB"

	mkdir -p Netauto/$IP/Databases/OracleDB/nmap
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/nmap" "NMAP OracleDB"

	nmap --script oracle-tns-version -p 1521 $IP -oN Netauto/$IP/Databases/OracleDB/nmap/tns-version.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/nmap/tns-version.nmap" "NMAP OracleDB tns version enumeration script scan"

	nmap --script oracle-sid-brute -p 1521 $IP -oN Netauto/$IP/Databases/OracleDB/nmap/sid-brute.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/nmap/sid-brute.nmap" "NMAP OracleDB SID brute scan"

	nmap --script oracle-enum-users -p 1521 $IP -oN Netauto/$IP/Databases/OracleDB/nmap/enum-users.nmap
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/nmap/enum-users.nmap" "NMAP OracleDB users enumeration scan"

	mkdir -p Netauto/$IP/Databases/OracleDB/oscanner
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/oscanner" "oscanner"

	oscanner -s $IP -P 1521 | tee Netauto/$IP/Databases/OracleDB/oscanner/oscanner.txt
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/oscanner/oscanner.txt" "OracleDB oscanner enumeration scan"

	mkdir -p Netauto/$IP/Databases/OracleDB/tnscmd10g
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/tnscmd10g" "tnscmd10g"

	tnscmd10g version -h $IP | tee Netauto/$IP/Databases/OracleDB/tnscmd10g/oracledb_tnscmd10g.txt
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/tnscmd10g/tnscmd10g.txt" "tnscmd10g TNS version fingerprinting scan"

	mkdir -p Netauto/$IP/Databases/OracleDB/ODAT
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/ODAT" "ODAT"

	odat sidguesser -s $IP | tee Netauto/$IP/Databases/OracleDB/ODAT/odat.txt
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/ODAT/odat.txt" "odat SID brute scan"

	odat-libc2.12-x86_64 passwordguesser -s $IP -d XE --accounts-file accounts/default.txt | tee Netauto/$IP/Databases/OracleDB/ODAT/passwordguesser.txt
	path_check "$(pwd)/Netauto/$IP/Databases/OracleDB/ODAT/passwordguesser.txt" "odat password brute scan"

	echo " "
}

###############################################################
# Port Detection                                              #
###############################################################
handle_ports() {
	start_time=$(date +%s%N)

	echo "[*] Starting full port scan at ${current_time}"	

	DEFAULT_DIRECTORY=Netauto/$IP/Protocols/

	local ports=$1

	IFS=',' read -ra port_array <<< "$ports"
	echo "$IFS"

	for port in "${port_array[@]}"; do
		case "$port" in
			7) echo_scan ;;
			21) ftp_scan ;;
			22) ssh_scan ;;
			23) telnet_scan ;;
			25) smtp_scan ;;
			465) smtp_scan ;;
			587) smtp_scan ;;
			43) whois_scan ;;
			49) tacacs_scan ;;
			53) dns_scan ;;
			69) tftp_scan ;;
			79) finger_scan ;;
			88) kerberos_scan ;;
			110) pop_scan ;;
			111) portmapper_scan ;;
			113) ident_scan ;;
			123) ntp_scan ;;
			135) msrpc_scan ;;
			593) msrpc_scan ;;
			137) netbios_scan ;;
			138) netbios_scan ;;
			139) smb_scan ;;
			445) smb_scan ;;
			143) imap_scan ;;
			993) imap_scan ;;
			161) snmp_scan ;;
			162) snmp_scan ;;
			10161) snmp_scan ;;
			10162) snmp_scan ;;
			194) irc_scan ;;
			264) check_point_firewall_scan ;;
			389) ldap_scan ;;
			636) ldap_scan ;;
			3268) ldap_scan ;;
			3269) ldap_scan ;;
			500) ipsec_scan ;;
			502) modbus_scan ;;
			512) rexec_scan ;;
			513) rlogin_scan ;;
			514) rsh_scan ;;
			515) lpd_scan ;;
			548) afp_scan ;;
			554) rtsp_scan ;;
			8554) rtsp_scan ;;
			623) ipmi_scan ;;
			631) ipp_scan ;;
			700) epp_scan ;;
			873) rsync_scan ;;
			1026) rusersd_scan ;;
			1080) socks_scan ;;
			1098) java_rmi_scan ;;
			1099) java_rmi_scan ;;
			1050) java_rmi_scan ;;
			1414) ibm_mq_scan ;;
			1521) oracledb_scan ;;
			1723) pptp_scan ;;
			1883) mqtt_scan ;;
			2049) nfs_scan ;;
			2301) compaq_scan ;;
			2381) compaq_scan ;;
			2375) docker_scan ;;
			2376) docker_scan ;;
			3128) squid_scan ;; 
			3260) iscsi_scan ;;
			3289) rdp_scan ;;
			3299) saprouter_scan ;;
			3632) distcc_scan ;;
			3690) subversion_scan ;;
			3702) ws-discovery_scan ;;
			4369) epmd_scan ;;
			4786) cisco_smart_install_scan ;;
			4840) opc_scan ;;
			5000) docker_registry_scan ;;
			5353) mdns_scan ;;
			5439) redshift_scan ;;
			5555) android_debug_bridge_scan ;;
			5601) kibana_scan ;;
			5671) amqp_scan ;;
			5672) amqp_scan ;;
			5800) vnc_scan ;;
			5801) vnc_scan ;;
			5900) vnc_scan ;;
			5901) vnc_scan ;;
			5985) winrm_scan ;;
			5986) omi_scan ;;
			6000) x11_scan ;;
			8009) ajp_scan ;;
			8089) splunk_scan ;;
			8333) bitcoin_scan ;;
			18333) bitcoin_scan ;;
			38333) bitcoin_scan ;;
			18444) bitcoin_scan ;;
			9000) fastcgi_scan ;;
			9001) hsqldb_scan ;;
			9042) cassandra_scan ;;
			9160) cassabdra_scan ;;
			9100) raw_printing_scan ;;
			9200) elasticsearch_scan ;;
			10000) ndmp_scan ;;
			11211) memcached_scan ;;
			15672) rabbitmq_scan ;;
			24007) glusterfs_scan ;;
			24008) glusterfs_scan ;;
			24009) glusterfs_scan ;;
			49152) glusterfs_scan ;;
			44134) tiller_helm ;;
			44818) ethernetip_scan ;;
			47808) bacnet_scan ;;
			50030) hadoop_scan ;;
			50060) hadoop_scan ;;
			50070) hadoop_scan ;;
			50075) hadoop_scan ;;
			50090) hadoop_scan ;;
			80) http_scan ;;
			443) https_scan ;;
			1443) https_scan ;;
			*) ;;  # Default case if no specific action is needed for a port
		esac
	done

	end_time=$(date +%s%N)

	echo "[*] Ending full port scan at ${current_time}"	

	duration=$(( end_time - start_time ))
	seconds=$(( duration / 1000000000 ))

	echo "[*] Full port scan execution time: ${seconds}s"	
}

###############################################################
# Network                                                     #
###############################################################
default_nmap() {
	start_time=$(date +%s%N)

	echo "[*] Starting full reconnaissance scan at ${current_time}"	

	echo " "

	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Performing full reconnaissance scan${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to perform reconnaissance scan${ENDCOLOR}\n"

	mkdir -p Netauto/$IP
	path_check "$(pwd)/Netauto/$IP" "target machine"

	mkdir -p Netauto/$IP/Default
	path_check "$(pwd)/Netauto/$IP/Default" "Default"

        # Scans ports only and no host discovery
        # Scans for all ports available
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Executing port scan on target live host $IP${ENDCOLOR}\n"
	if [ "$MINRATE" == "" ]; then
		nmap -Pn $IP -p- -oN Netauto/$IP/Default/port.txt
	else 
		nmap $MINRATE -Pn $IP -p- -oN Netauto/$IP/Default/port.txt
	fi
	path_check "$(pwd)/Netauto/$IP/Default/port.txt" "port scan"

        echo " "

        # Runs "Script Scan" to discover additional information about the target host
        # This is to potentially identify vulnerabilities and/or misconfigurations
        # Scans vendor and service version for each open port (Service Version Detection)
        # Useful for attempting to identify outdated version of service
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Executing script scan on target live host $IP${ENDCOLOR}\n"
	if [ "$MINRATE" == "" ]; then
		nmap -sC -sV $IP -oN Netauto/$IP/Default/script.txt
	else 
		nmap $MINRATE -sC -sV $IP -oN Netauto/$IP/Default/script.txt
	fi
	path_check "$(pwd)/Netauto/$IP/Default/script.txt" "script scan"

        echo " "

        # Performs "TCP SYN Scan" by conducting TCP scan of target host by sending SYN packets
        # Also known as "Stealth Scan" as it is designed to be less intrusive and more discreet
        # Scans ports only and no host discovery
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Executing stealth scan on target live host $IP${ENDCOLOR}\n"
	if [ "$MINRATE" == "" ]; then
		sudo nmap -sS -Pn -n $IP -oN Netauto/$IP/DEFAULT/stealth_scan.txt
	else 
		sudo nmap $MINRATE -sS -Pn -n $IP -oN Netauto/$IP/DEFAULT/stealth_scan.txt
	fi
	path_check "$(pwd)/Netauto/$IP/Default/stealth.txt" "stealth scan"

        echo " "

        # Enables aggressive and/or advanced scanning techniques 
        # This involves such as OS/Version Detection, Script Scanning and Traceroute
        # This provides wealth of information about the target system 
        # Useful for detailed reconnaissane and vulnerability assessment
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Executing aggressive scan on target live host $IP${ENDCOLOR}\n"
	if [ "$MINRATE" == "" ]; then
		nmap -p- -A $IP -oN Netauto/$IP/DEFAULT/aggressive_scan.txt
	else 
		nmap $MINRATE -p- -A $IP -oN Netauto/$IP/DEFAULT/aggressive_scan.txt
	fi
	path_check "$(pwd)/Netauto/$IP/Default/aggressive.txt" "aggressive scan"

        echo " "

        # Scans all standard ports to establish connection system call using TCP Connection Scan
        # runs all the scripts and checks on them
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Executing TCP scan on target live host $IP${ENDCOLOR}\n"
	if [ "$MINRATE" == "" ]; then
		nmap -n -v -sT -A $IP -oN Netauto/$IP/DEFAULT/TCP_scan.txt
	else
		nmap $MINRATE -n -v -sT -A $IP -oN Netauto/$IP/DEFAULT/TCP_scan.txt
	fi
	path_check "$(pwd)/Netauto/$IP/Default/tcp.txt" "TCP"
	
        echo " "

        # Run Vulnerability Script to perform NSE Vulnerability Scan
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Executing vulnerability scan on target live host $IP${ENDCOLOR}\n"
	if [ "$MINRATE" == "" ]; then
		nmap -sV --script vuln $IP -oN Netauto/$IP/DEFAULT/vulnerability_scan.txt
	else
		nmap $MINRATE -sV --script vuln $IP -oN Netauto/$IP/DEFAULT/vulnerability_scan.txt
	fi
	path_check "$(pwd)/Netauto/$IP/Default/vuln.txt" "vulnerability scan"

        echo " "

	end_time=$(date +%s%N)

	echo "[*] Ending full reconnaissance scan at ${current_time}"	

	duration=$(( end_time - start_time ))
	seconds=$(( duration / 1000000000 ))

	echo "[*] Full default scan execution time: ${seconds}s"	
}

tcp_nmap() {
	start_time=$(date +%s%N)

	echo "[*] Starting full TCP scan at ${current_time}"	

	echo " "

	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Performing full TCP scan${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to perform TCP scan${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/TCP
	path_check "$(pwd)/Netauto/$IP/TCP" "TCP"

	nmap -n -v -sT -p- -T5 -oN Netauto/$IP/TCP/port.txt $IP
	path_check "$(pwd)/Netauto/$IP/TCP/port.txt" "full TCP port scan"


	sudo nmap -T4 -F -sV -sC -oN Netauto/$IP/TCP/service-version.txt --reason --stats-every 5s -p- $IP
	path_check "$(pwd)/Netauto/$IP/TCP/service-version.txt" "full TCP service and version detection scan"

        echo " "

	end_time=$(date +%s%N)

	echo "[*] Ending full TCP scan at ${current_time}"	

	duration=$(( end_time - start_time ))
	seconds=$(( duration / 1000000000 ))

	echo "[*] Full TCP scan execution time: ${seconds}s"	
}

udp_nmap() {
	start_time=$(date +%s%N)

	echo "[*] Starting full UDP scan at ${current_time}"	

	echo " "

	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Performing full UDP scan${ENDCOLOR}\n"
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_YELLOW}WARNING${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Sudo privileges is required to perform UDP scan${ENDCOLOR}\n"

	mkdir -p Netauto/$IP/UDP
	path_check "$(pwd)/Netauto/$IP/UDP" "UDP"

        sudo nmap -n -v -sU -oN Netauto/$IP/UDP/port.txt $IP
	path_check "$(pwd)/Netauto/$IP/UDP/port.txt" "full UDP port scan"
        echo ""

        sudo nmap -n -v -sU -p- -T5 -oN Netauto/$IP/UDP/service-version.txt $IP
	path_check "$(pwd)/Netauto/$IP/UDP/service-version.txt" "full UDP service and version detection scan"

        echo " "

	end_time=$(date +%s%N)

	echo "[*] Ending full UPD scan at ${current_time}"	

	duration=$(( end_time - start_time ))
	seconds=$(( duration / 1000000000 ))

	echo "[*] Full UDP scan execution time: ${seconds}s"	
}

###############################################################
# Help                                                        #
###############################################################
usage() {
        echo "Usage: Netauto -i <ip_address> [-u, --usage] [-h, --help] [-i, --ip] [-p, --ports] [-t, --timing] [-m, --mode] [-o, --output]"
}

help() {
        printf "${BOLD}Network Enumeration Automator with Nmap${ENDCOLOR}\n"
	echo " "
        echo "Usage: Netauto -i <ip_address> [-u, --usage] [-h, --help] [-i, --ip] [-p, --ports] [-t, --timing] [-m, --mode] [-o, --output]"
	echo " "
        echo "Options:"
        printf "  ${BOLD}-h, --help${ENDCOLOR}              	  Help & Usage\n"
        printf "  ${BOLD}-i, --ip${ENDCOLOR}              	  Scan IP address of the target device\n"
        printf "  ${BOLD}-p, --ports${ENDCOLOR}              	  Scan ports of the targets device\n"
        printf "  ${BOLD}-t, --timing${ENDCOLOR}              	  Set NMAP timing minrate option\n"
        printf "  ${BOLD}-m, --mode${ENDCOLOR}              	  Set type of scan to perform\n"
        printf "  ${BOLD}-o, --output${ENDCOLOR}              	  Sets the output destination for scan results\n"
        echo " "
        echo "Timing minrate options:"
        printf "  ${BOLD}-T0${ENDCOLOR}              	  Paranoid\n"
        printf "  ${BOLD}-T1${ENDCOLOR}              	  Sneaky\n"
        printf "  ${BOLD}-T2${ENDCOLOR}              	  Polite\n"
	printf "  ${BOLD}-T3${ENDCOLOR}              	  Normal (Default)\n"
        printf "  ${BOLD}-T4${ENDCOLOR}              	  Aggressive\n"
        printf "  ${BOLD}-T5${ENDCOLOR}              	  Insane\n"
	echo " "
	echo "Mode options: "
	printf " ${BOLD}recon${ENDCOLOR}			  Full Reconnaissance Scan\n"
	printf " ${BOLD}tcp${ENDCOLOR}			  TCP Scan\n"
	printf " ${BOLD}udp${ENDCOLOR}			  UDP Scan\n"
	printf " ${BOLD}script${ENDCOLOR}			  Script Scan\n"
	printf " ${BOLD}brute${ENDCOLOR}			  Brute Scan\n"
	printf " ${BOLD}vuln${ENDCOLOR}			  Vulnerability Scan\n"
	echo " "
	exit 1
}

###############################################################
# Arguments                                                   #
###############################################################
if [ $# -eq 0 ];
then 
        help
        exit 1
fi

IP=""
PORTS=""
MINRATE=""

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h|--help) help ;;
	-u|--usage) usage ;;
        -i|--ip) IP="$2"; shift ;;
        -p|--ports) PORTS="$2"; shift ;;
        -m|--minrate) MINRATE="$2"; shift ;;
	*) printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Unknown Parameter Passed: $1${ENDCOLOR}"; exit 1 ;;
    esac
    shift
done

# ===============================================================
# Checking Conditions...
# ===============================================================

# --------------------------------------------------------------
# IP
# --------------------------------------------------------------
if [ -z "$IP" ]; then
        printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Missing IP address. Please specify an IP using the -i option.${ENDCOLOR}"
        exit 1
fi

# --------------------------------------------------------------
# MINRATE
# --------------------------------------------------------------
if [[ -n "$MINRATE" ]]; then
	# Check if the user selected only one timing option
	if [ -z "$MINRATE" ]; then
		$MINRATE=3
	fi

	# Check if the input is an integer
	if ! [[ $MINRATE =~ ^[0-9]+$ ]]; then
	    printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Minrate Input must be an integer${ENDCOLOR}"
	    exit 1
	fi

	# Check if the input is a single character
	if [ $MINRATE -ne 1 ]; then
	    printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Minrate Input must be a single character${ENDCOLOR}"
	    exit 1
	fi

	# Check if the integer is not higher than 5
	if [ $MINRATE -gt 5 ]; then
	    printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Minrate Input must not be higher than 5${ENDCOLOR}"
	    exit 1
	fi
fi 

# --------------------------------------------------------------
# Printing output options...
# --------------------------------------------------------------
echo " "

printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Testing connection on target live host $IP${ENDCOLOR}\n"

test_connection_command=$(nmap -sn $IP)
if echo "$test_connection_command" | grep -q "Host is up"; then 
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${BOLD_WHITE}Target live host $IP is open${ENDCOLOR}\n"
else
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${BOLD_RED}ERROR${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Invalid target live host connection${ENDCOLOR}\n"
	exit 0
fi

if [[ -n "$PORTS" ]]; then
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Enumerating the following ports: $PORTS${ENDCOLOR}\n"
fi
if [[ -n "$MINRATE" ]]; then
	printf "${WHITE}[${ENDCOLOR}${CYAN}$current_time${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}[${ENDCOLOR}${GREEN}INFO${ENDCOLOR}${WHITE}]${ENDCOLOR} ${WHITE}Applying the following minrate timing option: $MINRATE${ENDCOLOR}\n"
fi

echo " "

if [ -z "$PORTS" ]; then
	default_nmap
        exit 1
else 
	handle_ports $PORTS
	exit 1
fi

